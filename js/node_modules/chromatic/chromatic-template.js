function applyTemplate( arr, sourceFilename, templateFilename, settings ) {
	// LATE_GEN_2018 sourceFilename is not valid anymore. 
	if ( sourceFilename )
		throw new Error( "sourceFilename is not implemented. See tag LATE_GEN_2018." );

	var result = "";
	if ( ! templateFilename ) 
		templateFilename = "chromatic-template.ly";

	// console.error( 'settings', settings );

	if ( ! settings ) 
		settings = {
			tempo : 130,
		};
	// console.error( 'default settings', settings );
	function js2scm( k ) {
		k = k.replace( /([A-Z][a-z0-9]*)/g, (s0,s1)=>"-" + s1.toLowerCase() );
		k = k.replace( /^-/, '' );
		return k;
	}

	function getSetting() {
		var s = '';
		for ( var i in settings ) {
			var matched = /^(scm)(.*)$/.exec( i );
			if ( matched ) {
				switch ( typeof settings[i] ) {
					case "string" :
					case "number" :
						s += `( ${js2scm(matched[2])} . ${settings[i]} )`;
						break;
					case "boolean" :
						s += `( ${js2scm(matched[2])} . ${settings[i] ? '#t' : '#f' } )`;
						break;
					default:
				}
			}
		}
		// console.error( '*********', `'(${s})` );
		return `'(${s})`;
	}

result += `
\\version "2.18.2"
\\include "aaron.ly"
\\include "${templateFilename}"
\\include "lilypond-book-preamble.ly"
\\language "aaron"

`;

	function createBlock( filename, caption, comment, notes, lyrics ) {
		var result =  "";
		if ( caption ) {
			result +=
(`
\\markup \\bold \\italic {
    ${caption}
}
`);
		}

		if ( comment ) {
			let es = comment.split( /\n/ );
			for ( let i=0; i<es.length; i++ ) {
				result += "    %" + es[i] + "\n";
			}
		}

		result +=
`
\\makescore 
  \\relative do' {
    ${notes}
  }
  #${getSetting()}
`;
		return result;
	}

	for ( var i=0; i<arr.length; i++ ) {
		var e= arr[i];
		// e.filename is not necessary anymore (Sat, 21 Apr 2018 11:46:28 +0900)
		result += createBlock( e.filename, e.caption, e.comment, e.notes, e.lyrics );
	}
	return result.trim();
}

if ( module && module.exports ) {
	module.exports = applyTemplate;
} else {
	let content = '';
	process.stdin.resume();
	process.stdin.on('data', function(buf) { content += buf.toString(); });
	process.stdin.on('end', function() {
		console.error( content );
		process.stdout.write( applyTemplate( new Function( content ).apply() ) );
		process.stdout.write( "\n" );
	});
}

