function templateFunc( arr, sourceFilename, templateFilename, settings ) {
	// LATE_GEN_2018 sourceFilename is not valid anymore. 
	if ( sourceFilename )
		throw new Error( "sourceFilename is not implemented. See tag LATE_GEN_2018." );

	var result = "";
	if ( ! templateFilename ) 
		templateFilename = "chromatic-template.ly";

	// console.error( 'settings', settings );

	if ( ! settings ) 
		settings = {
			tempo : 130,
		};
	// console.error( 'default settings', settings );
	function js2scm( k ) {
		k = k.replace( /([A-Z][a-z0-9]*)/g, (s0,s1)=>"-" + s1.toLowerCase() );
		k = k.replace( /^-/, '' );
		return k;
	}

	function getSetting() {
		var s = '';
		for ( var i in settings ) {
			var matched = /^(scm)(.*)$/.exec( i );
			if ( matched ) {
				switch ( typeof settings[i] ) {
					case "string" :
					case "number" :
						s += `( ${js2scm(matched[2])} . ${settings[i]} )`;
						break;
					case "boolean" :
						s += `( ${js2scm(matched[2])} . ${settings[i] ? '#t' : '#f' } )`;
						break;
					default:
				}
			}
		}
		// console.error( '*********', `'(${s})` );
		return `'(${s})`;
	}

result += `
\\version "2.18.2"
\\include "aaron.ly"
\\include "${templateFilename}"
\\include "lilypond-book-preamble.ly"
\\language "aaron"

`;

	function createBlock( filename, caption, comment, notes, lyrics ) {
		var result =  "";
		if ( caption ) {
			result +=
(`
\\markup \\bold \\italic {
    ${caption}
}
`);
		}

		if ( comment ) {
			let es = comment.split( /\n/ );
			for ( let i=0; i<es.length; i++ ) {
				result += "    %" + es[i] + "\n";
			}
		}

		result +=
`
\\makescore 
  \\relative do' {
    ${notes}
  }
  #${getSetting()}
`;
		return result;
	}

	for ( var i=0; i<arr.length; i++ ) {
		var e= arr[i];
		// e.filename is not necessary anymore (Sat, 21 Apr 2018 11:46:28 +0900)
		result += createBlock( e.filename, e.caption, e.comment, e.notes, e.lyrics );
	}
	return result.trim();
}


	/////////////////////////////////////////////
	//
	//
	//
	/////////////////////////////////////////////

	var ch = require( 'chromatic' );
	function transpose( value ) {
		return ch.transpose( value ).join( " " )
	}

	function toNotes_pre( s ) {
		s = s.replace( /\n/gm, ' \\bar"" \\break ' );
		return s;
	}
	function toNotes( s ) {
		// console.error( s );
		s = s.replace( /\|/g,  '\\bar "|" ' );
		s = s.replace( /\n/gm, ' \\bar "" \\break ' );
		// console.error( s );
		return s;
	}
	function toLyrics( s ) {
		// Removing 's'
		s = s.replace( /(\s*\bs[0-9]*\b\s*)/g, ' ' );
		// Replacing ' ,
		s = s.replace( /[\'\,]/g, " " );
		// Replacing '< ... >'
		s = s.replace( /\<(.*?)\>/g, ( s0, s1 ) => {
			s1 = s1.split( / +/ ).reverse().join( " " ).trim();
			return "\\markup{   \\override #\'(baseline-skip . 2.5) \\center-column{ " + s1 + "  } } " 
		});
		// Replacing '[ ... ]'
		s = s.replace( /[\[\]]/g, " " );
		return s;
	}

	//
	// noteArrays = [
	//	  "do do re mi fa",
	//	  [ 'do', 'do', 're', 'mi', ],
	//	  [ 'do', 'do', 're', 'mi', ],
	// ] 
	// => This bocomes a file contains three scores.
	//
	function applyTemplate( noteArrays, sourceFilename, templatePath, settings ) {
		// Note : note that templatePath can be undefined. See solfege-template.ly .
		if ( Array.isArray( noteArrays ) ) {
			throw new Error( "Passing an array object here is not implemented. See tag LATE_GEN_2018." );
		} else {
			noteArrays = [ noteArrays ] ;
		}

		/*
		 * LATE_GEN_2018
		 * 
		 * WARNING noteArrays CANNOT ACCEPT ARRAYS ANYMORE.
		 *
		 * This modification (LATE_GEN_2018) breaks the specification that
		 * applyTemplate() function accepts noteArrays as an array object so that
		 * the multiple series of notes can be processed. This functionality is not
		 * used. If you are planning to use this functionality, this implementation
		 * must be re-implemented.
		 */

		var result = [];
		for ( var i=0; i< noteArrays.length; i++ ) {
			var s = noteArrays[i];
			s = toNotes_pre( s );
			s = transpose( s );
			result[i] = {
				filename : sourceFilename, // LATE_GEN_2018
				notes : toNotes( s ),
				lyrics : toLyrics( s  ),
			};
		}
		return templateFunc( result, null, templatePath, settings );
	};

if ( module && module.exports ) {
	module.exports.templateFunc = templateFunc;
	module.exports.applyTemplate = applyTemplate;
} else {
	let content = '';
	process.stdin.resume();
	process.stdin.on('data', function(buf) { content += buf.toString(); });
	process.stdin.on('end', function() {
		console.error( content );
		process.stdout.write( templateFunc( new Function( content ).apply() ) );
		process.stdout.write( "\n" );
	});
}

