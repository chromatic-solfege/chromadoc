#!/usr/bin/nodejs

// Read all stdin.
var DATA = require('fs').readFileSync(0,'utf-8');
var CONVERTER_NAME = require('path').basename( process.argv[1] );
var DATE = new Date().toString();

var DEBUG = 'false';
var OUTPUT_DIR = 'out';
var GENERATOR = 'CHROMADOC_FORMATTER';


var argv = Array.prototype.concat.apply( process.argv );
argv.shift();
argv.shift();

while ( 0<argv.length ) {
    var v = argv.shift();
    var key = null;
    var value = null;
    if ( v.startsWith ('--') ) {
        var arr = v.substring( 2 ).split('=',2);
        key = arr[0];
        value =  arr[1];
    } else if ( v.startsWith ('-') ) {
        key = v.substring( 1 );
    }
    function getValue() {
        return value || argv.shift();
    }
    if ( key != null ) {
        switch ( key ) {
            case 'output' :
                OUTPUT_DIR = getValue();
                break;
            case 'debug' :
                DEBUG = getValue() === 'true' ? 'true' : 'false';
                break;
            case 'generator' :
                GENERATOR = getValue();
                break;
            default :
                throw new Error( "unknown exception" );
                break;
        }
    }
}
function spc(l){
    var s ='';
    for ( var i=0; i<l; i++ ) {
        s+=' ';
    }
    return s;
}

var ChromaticFormatter = require( 'chromadoc/formatter' );

var GLOBAL_METHODS =[];
{
    var list = ChromaticFormatter.boundFunctionNameList;
    for ( var i=0; i<list.length; i++ ) {
        var s = list[i];
        GLOBAL_METHODS.push( `var ${s} ${spc(16-s.length)} = ${GENERATOR}.boundFunctions['${s}' ${spc(16-s.length)} ];` );
    }
}


// Write the converted text
process.stdout.write(`\
#!/bin/nodejs
// =========================================================
// This file is automatically generated by ${CONVERTER_NAME} 
// on ${DATE} .
// =========================================================

// Initialization.
require( 'chromadoc' );

// Create the formatter.
var ScaleGenerator = require( 'chromadoc/formatter' );

// Common Constant Values
var OUTPUT_DIR = '${OUTPUT_DIR}/';
var MSG_HARMONIC_TO_ENHARMONIC = 'Harmonic First, Enharmonic Last';
var MSG_ENHARMONIC_TO_HARMONIC = 'Enharmonic First, Harmonic Last';

var DEBUG = ${DEBUG};
var ${GENERATOR} = new ScaleGenerator( OUTPUT_DIR /*, 'basic' */ );

${GLOBAL_METHODS.join('\n')}

if ( DEBUG ) {
    ${GENERATOR}.setDevelopmentMode( true );
}

// ${GENERATOR}.disable();
// ${GENERATOR}.setAlwaysOutputHeader( true );

//
// >>> ===================================================
//

${DATA}

//
// <<< ===================================================
//

${GENERATOR}.close();
`);

// vim:filetype=javascript:
