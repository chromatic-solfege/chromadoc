#!/usr/bin/nodejs

// Names of Toolkits
// chtk ... Chromatic Tool Kit (CHTK)
// ditk ... Diatonic Interval Tool Kit (DITK)
// eitk ... Enharmonic Interval Tool kit(EITK)
// fctk ... Fret-diagram Chromatic Tool kit(FCTK)

// Initialization.
require( 'chromatic' ).globalSettings( require( 'local/settings' ) );

// Create the formatter.
var ScaleGenerator = require( 'chromatic/formatter' );

// Common Constant Values
var OUTPUT_PATH = 'out/'
var MSG_HARMONIC_TO_ENHARMONIC = 'Harmonic First, Enharmonic Last';
var MSG_ENHARMONIC_TO_HARMONIC = 'Enharmonic First, Harmonic Last';

function batch() {
    // var DEBUG = true;
    var DEBUG = false;
    var c = new ScaleGenerator( OUTPUT_PATH /*, 'basic' */ );

    // c.writeNewPage();
    // c.t_abstract`Hey foo bar`;
    // c.writeNewPage();

    if ( DEBUG ) {
        c.setDevelopmentMode( true );
    }
    // c.disable();
    // c.setAlwaysOutputHeader( true );
    
    // TODO Write descriptions to every harmonic intervals.
    // TODO Scales with Guitar Diagram


    // c.enable();
    // c.writeHeaderPart( "Note Names" );
    // c.disable();

    // \textbf{\textit{ UNFINISHED 29 May 2019 }} \\
    c.t_abstract`
            In modern music, many compositions are polymodal. Now many
            contemporary compositions are not easily written by the traditional
            notation system.  In order to obtain better understanding for
            polymodality, let’s extend the traditional diatonic solfège into
            chromatic solfège. 
            
            This article will explain how to implement new chromatic solfège by
            introducing additional note names, and then it will show how to
            build fluency with the new solfege system by mechanically
            enumerating all possible intervals.

            Not only does this article provide written materials, it also
            provides audible materials. Every examples in this article
            including explanations and notes can be listen.  It takes
            approximately one hour to listen through the whole article.
            
            `;

    c.t_header0`Introduction`;
    c.t_textBody`
            In the modern diatonic based interval system, there are certain missing
            intervals which do not exist without irregular accidentals such as
            double flat, double sharp, C\cflat , F\cflat. E\csharp and B\csharp.
            For example G\cflat does not have the perfect 4th interval without an
            irregular flatted note C\cflat.  Enharmonically speaking, C\cflat is
            B\cnatural; but harmonically speaking, B\cnatural from G\cflat is the
            augmented major 3rd rather than the perfect 4th. 

            In modern music, most tunes are played in equal temperament. Especially
            in jazz music in 1980’s or later, the scales are premised equal
            temperament and players frequently modulate tonality of tunes. However,
            the music notation is still using the diatonic based interval system;
            therefore it is still necessary to go through the complication of the
            missing intervals.

            In general, it is preferable to write intervals with harmonically
            correct name; for example, writing G\cflat major scale’s 4th note as
            C\cflat rather than B\cnatural is preferable because B\cnatural is not
            4th but augmented major 3rd. In practical use, however, harmonic
            correctness is often intentionally disregarded because it does not
            employ how to play on musical instruments; therefore it is also very
            common to write C\cflat as B\cnatural in this case. The modern musical
            instruments are based on equal temperament; in spite of the note that a
            player should play is harmonically C\cflat, the player has to
            manipulate their instrument as if the note is B\cnatural.

            There are many inconsistently written notes in practical world. In
            order to obtain better and faster reading ability, let’s name all
            the intervals chromatically, and then enumerate all the possible
            irregular intervals, and we categorize them into three classes, and
            train ourselves to build fluency to the irregularity.
        `;

    c.writeNewPage();
    c.writeTOC();
    c.writeNewPage();

    c.t_header1`Diatonic-Based Notation System`;
    c.t_textBody`
        Modern European music notation is based on a diatonic scale; that is,
        it presumes that there are seven notes in an octave. In practical world,
        scales are not always diatonic. For example, rock music is often based on a
        pentatonic scale which consists five notes in an octave. Jazz music
        often uses intervals which are based on the diminished scale which
        consists eight notes in an octave. 

        In a diatonic scale, if third intervals are stacked repeatedly, the
        entire note group spans two octaves as \textit{ [ do mi sol ti re fa la do]}. 
        \\~
        `;

    c.writeScore( 'example01', `@do do mi sol ti re fa la do`, { texGraphicWidth : 0.6 , lyTextAfter : [5,3]} );
            
    c.t_textBody`
        \\~
        \\~

        This property is also inherited to the notation system.  Therefore,
        when it comes to write intervals which are not based on a diatonic
        based scale, it will be problematic.  

        For example, the diminished scale is an octatonic scale.  The
        diminished scale is a compound of two diminished 7th chords. The
        diminished 7th chord consists four notes; thus the diminished scale
        consists eight notes. The four notes which belong to diminished 7th
        chord are considered that the intervals between the notes are always
        minor 3rd.  As mentioned above, repeatedly stacking third intervals in
        diatonic scale spans two octaves; but in octatonic scales, stacking 3rd
        intervals spans only an octave. There is a gap between two.
        \\~
        `;

    c.writeScore( 'example01', `@do do me se la`,   { texGraphicWidth : 0.6 , lyTextAfter : [5,3]} );

    c.t_textBody`
        \\~
        \\~

        Interval between G\cflat and A is not minor third, but augmented
        second. In order to follow the harmonic correctness, this interval
        should be written as G\cflat and B\cdoubleflat.

        \\~
    `;

    c.writeScore( 'example01', `@do do me se taw `, { texGraphicWidth : 0.6 , lyTextAfter : [5,3]} );

    c.t_textBody`
        \\~
        \\~

        The modern European music notation system always yields such "gaps"
        when it is used for writing intervals which are based on non-diatonic
        scale. Such gaps become "wrinkles" on the notation system and one will
        see them as irregular accidentals such as double-sharp, double-flat,
        triple-sharp, triple-flat.

        `;
    c.t_header1`Necessity of Irregular Accidental`;
    c.t_textBody`
        Diminished fifth and augmented fourth are enharmonically equivalent.
        Diminished fifth is an interval which consists six semitones. And so is
        augmented fourth; it is an interval which consists same six semitones. 

        But those two have different functions and are used in different
        context. Diminished fifth has a function to provoke listeners want to
        hear smaller intervals such as major third at the next.

        \\~
        `;

    c.writeScore( 'example01', `@do do4 re mi fa sol la ti do || ti,4 fa' do mi `, { texGraphicWidth : 0.6 , lyTextAfter : [5,3], scmFestivalTempo:150} );
    c.t_textBody`
        \\~
        \\~

        But augmented fourth does not has such a function; it will stay in the
        same intervals.

        \\~
    `;
    c.writeScore( 'example01', `@do fa4 sol la ti do re mi fa || fa,4 ti fa ti`, { texGraphicWidth : 0.6 , lyTextAfter : [5,3], scmFestivalTempo:150 } );


    // c.t_textBody`
    //         \csharp 9th is another example.
    //         Intervals ri fa are not major 2nd but diminished 3rd. In order to
    //         keep consistency of intervals, it is considered more consistent to
    //         write ri fa as ri ma or me fa. In the same manner, li do may be
    //         written as li ta or te do.
    //     `;

   
    c.t_textBody`
        \\~
        \\~

        Therefore, any notation system should be able to distinctly show these
        functional difference. 
        
        But many musical instrumental players often do not prefer to follow the
        interval correctness.  Because most instruments are not based on
        intervals but absolute note name. For example, a piano has keys which
        are corresponding to musical notes and those are supposed to be pushed
        in order to obtain the actual notes.  In such instruments, interval
        correctness does not employ how to play it.

        At this point, guitars are different. Rarely are guitarists aware what
        note they are actually playing. In most of time, the only thing what
        guitarists care is what "intervals" they are playing. 

        On guitars, musical intervals are always appearing as the same
        configuration no matter what key the notes are belong to.  The
        configuration of musical notes on a fretboard of a guitar is
        enharmonically normalized and consistently aligned. Unlike piano, there
        are no duplicated notes which comes from note alternation.  
        
        The following pictures depict Cmaj7, D\cflat maj7 Dmaj7 E\cflat maj7 on
        a fretboard of a guitar. One can see in the pictures that how the
        tetrad consistently moves to right as they are transposed to higher
        keys.

        \\~
        `;

    // FIXME this does not generate pictures correctly.
    var settings_SmallScaleChart ={ 
        texGraphicWidth : 0.4 , lyTextAfter : [3,3], scmFestivalTempo:150, 
        scmShowScaleDiagram:true, scmAlwaysShowZeroFret:true, scmFretRange : "(1 . 12)", scmFretPositions : "( 5 4 4 3 )" 
    };

    c.t_commands`\begin{figure}[h]`;
    c.t_commands`\centering`;
    c.writeScore( 'example01', `@do do4 mi sol ti`, settings_SmallScaleChart );
    c.writeScore( 'example01', `@ra do4 mi sol ti`, settings_SmallScaleChart );
    c.t_textBody`\\~`;
    c.t_textBody`\\~`;
    c.writeScore( 'example01', `@re do4 mi sol ti`, settings_SmallScaleChart );
    c.writeScore( 'example01', `@me do4 mi sol ti`, settings_SmallScaleChart );
    c.t_commands`\caption{Note Spelling with Enharmonic Consistency}`;
    c.t_commands`\end{figure}`;

    c.t_textBody`
        Therefore, intervals are the first thing to come into minds of 
        guitarists and rarely do guitarists aware what notes they are playing.
        Pianists tent to respell notes with irregular accidentals into
        enharmonic equivalent notes. But Enharmonically respelled musical notes
        do not make much sense for guitarists because they do not employ how to play
        on guitars. Rather, guitarists prefer harmonically consistent note
        spelling as following :

        \\~
    `;

    c.t_commands`\begin{figure}[h]`;
    c.t_commands`\centering`;
    c.writeScore( 'example01', `@do do4 mi sol ti`, settings_SmallScaleChart );
    c.writeScore( 'example01', `@do di4 ma si ta`,  settings_SmallScaleChart );
    c.t_textBody`\\~`;
    c.t_textBody`\\~`;
    c.writeScore( 'example01', `@do dai4 mai sai tai`, settings_SmallScaleChart );
    c.writeScore( 'example01', `@do dao4 mao sao tao`, settings_SmallScaleChart );
    c.t_textBody`\\~`;
    c.t_textBody`\\~`;
    c.t_commands`\caption{Note Spelling with Harmonic Correctness}`;
    c.t_commands`\end{figure}`;

    c.t_textBody`
        In this way of spelling notes, one can easily see that the tetrad is
        consistently transposed with a half step each with the drawback that
        one cannot easily tell what notes they actually belong to. This way of
        spelling notes eases guitarists to read musical notes; in the mean
        time, this might be harsh to other majority of musicians.
        
        Unfortunately for the guitarists, the majority of musicians prefers
        enharmonic spelling. This is also a major reason why many guitarists
        are not able to read musical notes.

        Comparing harmonic spelling and enharmonic spelling, both have their
        advantages and disadvantages.  Enharmonic spelling denotes how to play
        instruments but one cannot tell how it sounds because of harmonic
        incorrectness. Harmonic spelling, though, denotes how it sounds;
        therefore it helps one to understand the patterns laying underneath the
        music. But it often confuses instrumental players.

        They oppose to each other and it seems that there is no way to satisfy
        the both requirement.
        `;

    c.t_header1`A Probable Solution to Satisfy Both Harmonic Correctness and Enharmonic Correctness`;
    c.t_textBody`
        This thesis is introducing a method to satisfy both harmonic
        correctness and enharmonic correctness without modifying the rule of
        the traditional musical notation system; the method is invented by
        Atsushi Oka.

        The idea is, extending traditional solfege ( [do re mi] ) into
        chromatic to name all of semitones in the diatonic scale, and
        memorizing the every association between harmonically spelled intervals
        enharmonically spelled intervals, and enumerating every corner cases
        which can occur in the traditional musical notation system, and
        memorizing all of them to understand the reason of the complication.

        This paper includes comprehensively studied list of every intervals.
        Every examples slightly differ with each other. The one watching it
        will see the reason why it need to be written with irregular
        accidentals as if it is in a flipbook.

        `;


    c.writeNewPage();

    c.enable();
    c.writeHeader0( "Notes" );
    {
        c.t_textBody`
            Welcome to the world of the chromatic solfège. The chromatic
            solfege system helps to acquire better understanding of the
            principles of beauties which is hidden behind the harmony.  This
            section introduces note names which are used in this chromatic
            solfege system.

            In this section, all of note names which are used in the chromatic
            solfege are shown.
        `;
        // This section introduces some exercises to build fluency for the note names with accidentals.
        // Read them aloud repeatedly until you can recite without seeing the actual spells.

        c.writeHeader1( "Natural" );
        c.writeTextBody( 'The diatonic notes are named as the traditional solfège.' );
        c.writeScore(  "example", "@do  do  re mi fa sol la ti do" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Flat" );
        c.writeTextBody( 'When flat is added to a note, the name of the note alters. The vowel part of the name will be replaced to “\\textit{e}”. In case the vowel is already “\\textit{e}”, it will be replaced with “\\textit{a}”.' );
        c.writeScore(  "example", "@do  de  ra me fe se  le te de" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Sharp" );
        c.writeTextBody( 'Sharp is treated in the same manner except it will be replaced with “i”. In case the vowel is already “i”, it will be replaced with “a” as well as flat.' );
        c.writeScore(  "example", "@do  di  ri ma fi si  li ta di" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Double Flat" );
        c.writeTextBody( 'Double flat is also treated in the same manner as flat and sharp, except the vowel is replaced with “aw”.' );
        c.writeScore(  "example", "@do  daw raw maw faw saw law taw daw" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Double Sharp" );
        c.writeTextBody( 'Double sharp is also treated in the same manner as double flat, except the vowel is replaced with “ai”.' );
        c.writeScore(  "example", "@do  dai rai mai fai sai lai tai dai" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Triple Flat" );
        c.writeTextBody( 'Notes with triple flat are called similarily with notes with double flats, except their names end with “f”.' );
        c.writeScore(  "example", "@do  dae  rae mae fae sae lae tae dae" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

        c.writeHeader1( "Triple Sharp" );
        c.writeTextBody( 'Notes with triple sharp are called similarily with notes with double sharp, except their names end with “f”.' );
        c.writeScore(  "example", "@do  dao  rao mao fao sao lao tao dao" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );
    }
    c.disable();

    c.writeHeader0( "Chromatic Scales" );
    {
        // TODO
        c.t_textBody`
            TODO The notes are able to There are two type of 
        `;
        c.writeHeader1( "Diminished Chromatic Scale" );
        c.writeTextBody( '.' );
        c.writeScore(  "example", "@do  do ra re me mi fa se sol le la te ti do" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );
    }


    var COMMON_WORD_01 = "Read them aloud repeatedly until you can recite without seeing the actual notes. ";

    // Chromatic Tool Kit (CHTK)
    var chtk = {
        build_octaves( arr ) {
            return [].concat( 
                arr.map( (s)=> s + ""      ),
                arr.map( (s)=> s + "'"     ),
                arr.map( (s)=> s + "''"    ),
                arr.map( (s)=> s + "'''"   ),
                arr.map( (s)=> s + "''''"  ),
                arr.map( (s)=> s + "'''''" )
            )
        },
        exec( id, scale, pattern, breakAt ) {
            if ( typeof scale === 'string' )
                scale = scale.split( /\s+/ );
            if ( typeof pattern === 'string' )
                pattern = pattern.split( /\s+/);

            var octaved_scale = chtk.build_octaves( scale );
            var result = '';

            function getNote( idx ) {
                return octaved_scale[ idx % octaved_scale.length ];
            }
            function addResult( ss ) {
                result+= ss;
            }
            function outputResult() {
                result = "\\absolute { " + result + " } ";
                c.writeScore( id, result, {scmFestivalTempo:170}  );
            }
            function resetResult() {
                result = '\\abs @do\' ';
            }

            resetResult();
            for ( var i=0; i<scale.length; i++ ) {
                if ( i!=0 )
                    addResult( ' ' );
                if ( i % breakAt == 0 && i!=0 )
                    addResult( ' |! ' );
                for ( var px=0; px<pattern.length; px++ )
                    addResult( getNote( i + pattern[px] ) + '4 ' );

                addResult( ' s ' );
            }

            addResult( "do'2 r2 " );
            outputResult();
            resetResult();

            invertedLength = ( scale.length  );
            for ( var i=0; i<scale.length; i++ ) {
                if ( i!=0 )
                    addResult( ' ' );
                if ( i % breakAt == 0 && i!=0)
                    addResult( ' |! ' );
                for ( var px=0; px<pattern.length; px++ )
                    addResult( getNote( invertedLength - i + pattern[px] ) + '4 ' );
                addResult( ' s ' );
            }
            addResult( " do2 r2" );
            outputResult();
            resetResult();
        },
    };

    c.writeHeader0( "Understanding Alterations" );
    c.writeTextBody( 
            `In this section, two exercises to build fluency with the relation between note names are shown.`
                + COMMON_WORD_01 
        );
    {
        // Chromatic Scale 1
        c.writeHeader1( "Horizontal Movement" );
        {
            c.writeHeader2( "Flat Chromatic Scale" );
            c.writeScore( "chromatic-02-flat",     "do  do ra re me mi fa se sol le la te ti do | do ti te la le sol se fa mi me re ra do" );

            c.writeHeader3( "Exercises for Flat Chromatic Scale" );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 2, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2, 3 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 3, 2, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2, 3, 4 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 4, 3, 2, 1, 0 ],  6 );

            c.writeHeader2( "Sharp Chromatic Scale" );
            c.writeScore( "chromatic-01-sharp",    "do  do di re ri mi fa fi sol si la li ti do | do ti li la si sol fi fa mi ri re di do" );

            c.writeHeader3( "Exercises for Sharp Chromatic Scale" );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 2, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2, 3 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 3, 2, 1, 0 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2, 3, 4 ],  6 );
            chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 4, 3, 2, 1, 0 ],  6 );
        }

        // Chromatic Scale 2
        c.writeHeader1( "Vertical Movement" );
        {
            c.writeHeader2( "Note Alteration" );
            c.writeScore( "notename-accidentals", 
                    "@do  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@re  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@mi  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@fa  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@sol do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@la  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@ti  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                    "@do  do  di dai dao dai di do s do de daw dae daw de do |! " 
                );

            c.writeHeader2( "Scale Alteration" );
            c.writeScore( "notename-accidentals", 
                    "@do  do  re mi fa sol la ti do       | do ti la sol fa mi re do |! " + 

                    "@do  di ri ma fi si li ta di         | di ta li si fi ma ri di   |! " +
                    "@do  dai rai mai fai sai lai tai dai | dai tai lai sai fai mai rai dai |! " +
                    "@do  dao rao mao fao sao lao tao dao | dao tao lao sao fao mao rao dao |! "  +
                    "@do  dai rai mai fai sai lai tai dai | dai tai lai sai fai mai rai dai |! " +
                    "@do  di ri ma fi si li ta di         | di ta li si fi ma ri di  |! " +

                    "@do  do re mi fa sol la ti do        | do ti la sol fa mi re do |! " + 

                    "@do  de  ra me fe se le te de         | de te le se  fe me ra de |! " + 
                    "@do  daw raw maw faw saw law taw daw | daw taw law saw faw maw raw daw |! " + 
                    "@do  dae rae mae fae sae lae tae dae | dae tae lae sae fae mae rae dae |! "  +
                    "@do  daw raw maw faw saw law taw daw | daw taw law saw faw maw raw daw |! " + 
                    "@do  de ra me fe se le te de         | de te le se  fe me ra de |! " + 

                    "@do  do re mi fa sol la ti do        | do ti la sol fa mi re do |! " + 
                    ""
                );
        }
    }

    c.writeHeader0( `Enharmonically Equivalent Notes` );
    c.writeTextBody( `
            In this section, some of exercises to build fluency with
            harmonically equivalent notes are presented. In order to understand
            the complexity of the traditional musical notation system, the
            exercises help to acquire some view points to see the reason why
            the complexity occurs.
            `);
    {
        // Enharmonicity 1
        c.writeHeader1( "Flat, Sharp and Natural" );
        {
            c.writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
            c.writeScore( "enharmonic-single-accidentals-sf", "do " +
                  "di ra  s  ri me  s  mi fe  s  ma fa  s  fi se  s  si le  s  li te  s  ti de  s  ta do  s  di ra |! " +
                  "di ra  s  ta do  s  ti de  s  li te  s  si le  s  fi se  s  ma fa  s  mi fe  s  ri me  s  di ra"
            );
            c.writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
            c.writeScore( "enharmonic-single-accidentals-fs", "do " +
                  "ra di  s  me ri  s  fe mi  s  fa ma  s  se fi  s  le si  s  te li  s  de ti  s  do ta  s  ra di |! " +
                  "ra di  s  do ta  s  de ti  s  te li  s  le si  s  se fi  s  fa ma  s  fe mi  s  me ri  s  ra di"
            );
        }


        c.writeHeader1( "Double Flat" );
        {
            c.writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
            c.writeScore( "enharmonic-double-flat-fn", "do " +
                  "daw te s raw do  s  maw re  s  faw me  s  saw fa  s  law sol  s  taw la  s  daw te   |! " +
                  "daw te s taw la  s  law sol s  saw fa  s  faw me  s  maw re   s  raw do  s  daw te " 
            );
            c.writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
            c.writeScore( "enharmonic-double-flat-nf", "do " +
                  "te daw  s do raw   s  re maw   s  me faw   s  fa saw   s  sol law   s  la taw   s  te daw    |! " +
                  "te daw  s la taw   s  sol law  s  fa saw   s  me faw   s  re maw    s  do raw   s  te daw  " 
            );
        }

        c.writeHeader1( "Double Sharp" );
        {

            c.writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
            c.writeScore( "enharmonic-double-sharp-sn", "do " +
                  "dai re  s  rai mi  s  mai fi  s  fai sol  s  sai la   s  lai ti  s  tai di  s  dai re |! " +
                  "dai re  s  tai di  s  lai ti  s  sai la   s  fai sol  s  mai fi  s  rai mi  s  dai re " 
            );

            c.writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
            c.writeScore( "enharmonic-double-sharp-ns", "do " +
                  "re dai  s  mi rai  s  fi mai  s  sol fai  s  la sai  s  ti lai  s  di tai  s  re dai |! " +
                  "re dai  s  di tai  s  ti lai  s  la sai  s  sol fai  s  fi mai  s  mi rai  s  re dai" 
            );
        }

        c.writeHeader1( "Triple Flat" );
        {
            c.writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
            c.writeScore( "enharmonic-triple-flat-fn", "do " +
                  "dae la  s  rae ti  s mae di  s  fae re   s  sae mi  s  lae fi  s  tae si  s  dae la |! " +
                  "dae la  s  tae si  s lae fi  s  sae mi   s  fae re  s  mae di  s  rae ti  s  dae la" 
            );
            c.writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
            c.writeScore( "enharmonic-triple-flat-nf", "do " +
                  "la  dae  s  ti  rae  s di  mae  s  re  fae   s  mi  sae  s  fi  lae  s  si  tae  s  la  dae |! " +
                  "la  dae  s  si  tae  s fi  lae  s  mi  sae   s  re  fae  s  di  mae  s  ti  rae  s  la  dae" 
            );
        }

        c.writeHeader1( "Triple Sharp" );
        {
            c.writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
            c.writeScore( "enharmonic-triple-sharp-sn", "do " +
                  "dao  me  s  rao  fa  s  mao  sol  s  fao  le  s  sao  te   s  lao  do  s  tao  re  s  dao  me |! " +
                  "dao  me  s  tao  re  s  lao  do   s  sao  te  s  fao  le   s  mao  sol s  rao  fa  s  dao  me" 
            );
            c.writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
            c.writeScore( "enharmonic-triple-sharp-ns", "do " +
                  "me   dao s  fa   rao   s  sol mao   s  le fao   s  te sao    s  do lao    s  re tao   s  me dao   |! " +
                  "me   dao s  re   tao   s  do lao    s  te sao   s  le fao    s  sol mao   s  fa rao   s  me dao  " 
            );
        }
    }



    c.writeHeader0( "Harmonically Strict Motions" );
    c.writeTextBody(
            `TODO`
    );
    {
        c.writeHeader1( "Strict Fourth Motion" );
        c.writeScore( "strict-fourth" , "\\abs @do' \\absolute { do fa te me' le ra' se' de fe taw maw' law raw' saw'  daw faw tae mae' lae rae' sae' dae fae }" , {scmFestivalTempo:100} );

        c.writeHeader1( "Strict Fifth Motion" );
        c.writeScore( "strict-fifth" ,  "\\abs @do' \\absolute { do sol re' la' mi' ti' fi''  di si ri' li' ma' ta' fai''  dai sai rai' lai' mai' tai' fao''  dao sao rao' lao' mao' tao' la'' }", {scmFestivalTempo:100} );

        c.writeHeader1( "Strict Minor Third Motion" );
        c.writeScore( 
                `\
                @do  do  me se taw s
                @di  do, me se taw s
                @re  do, me se taw s |!
                @ri  do, me se taw s 
                @mi  do, me se taw s 
                @fa  do, me se taw s |!
                @fi  do, me se taw s 
                @sol do, me se taw s 
                @si  do, me se taw s |!
                @la  do, me se taw s 
                @li  do, me se taw s 
                @ti  do, me se taw s |!
                @do  do, me se taw s s

                `.replace( /\n|\t\t/g, ' ' )
                );

        c.writeHeader1( "Strict Minor Third Motion 2" );
        c.writeScore( 
                `\
                @do \
                do  me se taw s  te sol mi ra  s  re fa le de s |! 
                do  la fi ri  s  mi sol te ra  s  re ti si ma s |! 
                fi  li di mi  s  fa re  ti si  s  la do me se s |! 
                sol mi di li  s  ti re  fa le  s  la fi ri ta  
                `.replace( /\t\t/g, '' ).replace( /\n/g, ' ' )
                );


        c.writeHeader1( "Fourth Motion" );
        c.writeScore( 
                "@do  do  fa te, me le  |  " +
                "@ra  do, fa te, me le  |  " +
                "@re  do, fa te, me le  |  " +
                "@me  do, fa te, me le  |! " +

                "@mi  do, fa te, me le  |  " +
                "@fa  do, fa te, me le  |  " +
                "@se  do, fa te, me le  |  " +
                "@sol do, fa te, me le  |! " +

                "@le  do, fa te, me le  |  " +
                "@la  do, fa te, me le  |  " +
                "@te  do, fa te, me le  |  " +
                "@ti  do, fa te, me le  |! " +
                "@do  do1" 
                );

        c.writeHeader1( "Fifth Motion" );
        c.writeScore( 
                "@do   do' sol' re' la mi' |  " +
                "@ti   do, sol' re' la mi' |  " +
                "@li   do, sol' re' la mi' |  " +
                "@la   do, sol' re' la mi' |! " +

                "@si   do, sol' re' la mi' |  " +
                "@sol  do, sol' re' la mi' |  " +
                "@fi   do, sol' re' la mi' |  " +
                "@fa   do, sol' re' la mi' |! " +

                "@mi   do, sol' re' la mi' |  " +
                "@ri   do, sol' re' la mi' |  " +
                "@re   do, sol' re' la mi' |  " +
                "@di   do, sol' re' la mi' |! " +
                "@do  do1" 
                );
    }



    c.writeHeader0( "Transposing" );
    // TODO
    c.writeTextBody( "TODO.");
    {
        c.writeHeader1( "Diatonic Scales" );
        {
            var ch = require( 'chromatic' );
            function eventhandler( eventtype, id, notes, text ) {
                if ( eventtype == 'tex' ) {
                    return (
                        '\\noindent ' + 
                        ch.note2alphabet_tex( id )
                            .replace( /\bflat\b/, "cflat" )
                            .replace( /\bsharp\b/, "csharp" )
                            .replace( /\bnatural\b/, "cnatural" ) +
                        '$\\vcenter{ \\hbox{ \\includegraphics[width=1.0 \\textwidth]{' + this.currentOutputFilenameAsPDF() + '}}}$\n'
                   );
                } else {
                    return text;
                }
            }

            c.writeHeader2( "Natural" );
            c.writeScore( null, "do  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

            c.writeHeader2( "Sharp" );
            c.writeScore( null, "sol do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "re  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "la  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "mi  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "ti  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "fi  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

            c.writeHeader2( "Flat" );
            c.writeScore( null, "fa  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "te  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "me  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "le  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "ra  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "se  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

            c.writeHeader2( "Special ( Flat )" );
            c.writeScore( null, "de  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "fe  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

            c.writeHeader2( "Special ( Sharp )" );
            c.writeScore( null, "di  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "si  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "ri  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "li  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "ma  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
            c.writeScore( null, "ta  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );


            c.writeHeader2( "Fourth Motion" );

            c.writeScore( null, "@do'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@fa'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@te'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@me'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@le'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@ra'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@se'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@de'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@fe'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@taw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@maw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@law' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@raw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@saw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@daw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@faw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@tae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@mae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@lae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@rae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@sae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@dae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@fae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
            c.writeScore( null, "@sol' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );

            c.writeHeader2( "Fifth Motion" );

            c.writeScore( null, "@do'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@sol' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@re'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@la'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@mi'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@ti'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@fi'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@di'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@si'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@ri'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@li'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@ma'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@ta'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@fai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@dai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@sai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@rai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@lai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@mai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@tai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@fao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@dao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@sao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@rao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@lao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@mao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@tao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
            c.writeScore( null, "@si'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        }

        c.writeHeader1( "Harmonically Strict Chromatic Scales" );
        c.writeTextBody( `\
            Generally chromatic scales are considered that they do not belong
            to any specific key.  Harmonically speaking, the chromatic scales
            also have keys when they come with harmonically correct intervals.
            Chromatic scale 
        ` );
        {
            var note2name = {
                'do' : 'C',
                'fa' : 'F',
                'te' : 'B\\flat',
                'me' : 'E\\flat',
                'le' : 'A\\flat',
                'ra' : 'D\\flat',
                'se' : 'G\\flat',
                'sol': 'G',
                're' : 'D',
                'la' : 'A',
                'mi' : 'E',
                'ti' : 'B',
                'fi' : 'F\\sharp',
            };
            var keys = "do fa te me le ra se ti mi la re sol".split( ' ' );
            for ( var i of keys ) {
                c.writeHeader2( 'Key ' + note2name[ i ] );
                // TODO
                c.writeScore( i + '-01', `@${i} do re mi fa sol la ti do do ti la sol fa mi re do` );
                c.writeScore( i + '-02', `@${i} do di re ri mi fa fi sol si la li ti do s do ti te la le sol se fa mi me re ra do` );
            }
        }
    }










    // Diatonic Interval Tool Kit (DITK)
    var ditk = {
        left_rotate(arr,offset) {
            arr = arr.concat();
            return arr.concat( arr.splice( 0, offset ) );
        },
        build_octaves( arr ) {
            return [].concat( 
                // arr.map( (s)=> s + ","     ),
                arr.map( (s)=> s + ""      ),
                arr.map( (s)=> s + "'"     ),
                arr.map( (s)=> s + "''"    ),
                arr.map( (s)=> s + "'''"   ),
                arr.map( (s)=> s + "''''"  ),
                arr.map( (s)=> s + "'''''" )
            )
        },
        merge_with_offset( notes , offset, from, to  ) {
            var result = [];
            for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                result.push( notes[ ( i          ) ] + '8 [ ' );
                result.push( notes[ ( i + offset ) ] + '8 ] ' );
            }
            result.push( notes[ ( to          ) ] + '8 ] ' );

            return result.join( ' ' ) ;
        },

        merge_with_offset2( notes , offset, from, to  ) {
            var result = [];
            for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                result.push( notes[ ( i          ) ] + '4 ' );
                result.push( notes[ ( i + offset ) ] + '4 s ' );
            }
            result.push( notes[ ( to          ) ] + '2' );

            return result.join( ' ' ) ;
        },
        num2interval( n ) {
            switch ( n )  {
                case  0 : return "Unison";
                case  1 : return "Second";
                case  2 : return "Third";
                case  3 : return "Fourth";
                case  4 : return "Fifth";
                case  5 : return "Sixth";
                case  6 : return "Seventh";
                case  7 : return "Octave";
                case  8 : return "Ninth";
                case  9 : return "Tenth";
                case 10 : return "Eleventh";
                case 11 : return "Twelfth";
                case 12 : return "Thirteenth";
                case 13 : return "Fourteenth";
                case 14 : return "Fifteenth";
                default :
                    throw new Error('');
            }
        },
        key2caption( key ) {
            return "key in " + key;
        },
        exec( scale, caption ) {
            c.writeHeader1( caption ) ;
            for ( var ridx=0; ridx<1; ridx++ ) {
                var scale  = scale.split(' ') ;
                var key    = ditk.left_rotate( scale, ridx ).shift();
                var notes  = ditk.left_rotate( ditk.build_octaves( scale ), ridx );
                var ottava = 4 <= ridx ? '\\ottava #1' : '';

                var pos_s = scale.length;
                var pos_e = scale.length * 2;

                // c.writeHeader2( 'All Intervals within ' + caption ) ;

                /*
                 * NOTE : pos_e must be added one because the root note on the next octave must be shown there.
                 * (Thu, 07 Jun 2018 12:44:30 +0900)
                 */
                c.writeScore( 'scale', '@do ' + ottava + ' \\absolute { ' + notes.slice( pos_s, pos_e + 1  ).join( ' ' ) + ' | ' + notes.slice( pos_s, pos_e + 1 ).reverse().join( ' ' )  + ' } ' );

                for ( var nidx=0; nidx<8; nidx++ ) {
                    c.writeHeader2( "" + ditk.num2interval( nidx ) + " within " + caption );
                    c.writeScore( nidx + '-01-u', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_s ,pos_e ) + " }", {scmFestivalTempo:170} );
                    c.writeScore( nidx + '-02-d', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_e ,pos_s ) + " }", {scmFestivalTempo:170} );
                }
            }
        },
    };



    c.writeHeader0( "Intervals in Alterations" );
    c.writeTextBody( 
            `
            In this section, all intervals in a diatonic scale and the diatonic
            scale with every possible alterations are comprehensively
            enumerated. These  lists can also be used as exercises which help
            to build fluency for the note names with every possible alterations.
            ` + COMMON_WORD_01 
        );
    {
        ditk.exec( "do re mi fa sol la ti", "Natural" );
        ditk.exec( "de ra me fe se le te", "Flat" );
        ditk.exec( "di ri ma fi si li ta", "Sharp" );
        ditk.exec( "daw raw maw faw saw law taw", "Double Flat" );
        ditk.exec( "dai rai mai fai sai lai tai", "Double Sharp" );
        ditk.exec( "dae rae mae fae sae lae tae", "Triple Flat" );
        ditk.exec( "dao rao mao fao sao lao tao", "Triple Sharp" );
    }

    // Enharmonic Interval Tool kit(EITK)
    var eitk = {
        exec ( l_scale, r_scale, rotation, from, to ) {
            if ( typeof l_scale === 'undefined' ) {
                throw new Error( "No scale was specified." );
            }
            if ( typeof r_scale === 'undefined' ) {
                r_scale = l_scale;
            }
            if ( typeof rotation === 'undefined' ) {
                rotation = 0;
            }
            if ( typeof from  === 'undefined' ) {
                from = 0;
            }
            if ( typeof to  === 'undefined' ) {
                to = 13;
            }
            // Enharmonic Chromatic Scale Tool Kit
            var note2name = {
                'do' : 'C',
                'fa' : 'F',
                'te' : 'B\\flat',
                'me' : 'E\\flat',
                'le' : 'A\\flat',
                'ra' : 'D\\flat',
                'se' : 'G\\flat',
                'sol': 'G',
                're' : 'D',
                'la' : 'A',
                'mi' : 'E',
                'ti' : 'B',
                'fi' : 'F\\sharp',
            };
            var intervalNames = [
                'Perfect Unison',
                'Minor Second',
                'Major Second',
                'Minor Third',
                'Major Third',
                'Perfect Fourth',
                'Diminished Fifth',
                'Perfect Fifth',
                'Minor Sixth',
                'Major Sixth',
                'Minor Seventh',
                'Major Seventh',
                'Perfect Octave',
                'Minor Nineth',
                'Major Nineth',
                'Minor Tenth',
                'Major Tenth',
                'Perfect Eleventh',
                'Diminished Twelveth',
                'Perfect Twelveth',
                'Minor Thirteenth',
                'Major Thirteenth',
                'Minor Fourteenth',
                'Major Fourteenth',
            ];
            var numberWords = [
                'zero',
                'one',
                'two',
                'three',
                'four',
                'five',
                'six',
                'seven',
                'eight',
                'nine',
                'ten',
                'eleven',
                'twelve',
                'thirteen',
                'fourteen',
                'fifteen',
                'sixteen',
                'seventeen',
                'eighteen',
                'nineteen',
                'twenty',
            ];
            function number2interval( i ) {
                return intervalNames[ i % intervalNames.length ];
            }
            function number2word( i ) {
                return numberWords[ i ];
            }

            function merge_with_offset( l_notes, r_notes, offset, from, to, size  ) {
                var result = [];
                for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                    result.push( l_notes[ ( i          ) ] + '4 ' );
                    result.push( r_notes[ ( i + offset ) ] + '4 s ' );
                }
                result.push( l_notes[ ( to          ) ] + '2 ' );

                return result.join( ' ') ;
            }
            function blowup(arr) {
                return [].concat( 
                    // arr.map( (s)=> s + ","     ),
                    arr.map( (s)=> s + ""      ),
                    arr.map( (s)=> s + "'"     ),
                    arr.map( (s)=> s + "''"    ),
                    arr.map( (s)=> s + "'''"   ),
                    arr.map( (s)=> s + "''''"  ),
                    arr.map( (s)=> s + "'''''" )
                )
            }

            function rotate(arr,offset) {
                // console.error( 'rotate', offset );
                return arr.concat( arr.splice( 0, offset ) );
            }

            function checkKey( key ) {
                if ( key == 'do' ) {
                    return 'natural';
                } else if ( 0<= ( "ti mi la re sol".split( ' ' ).indexOf( key )  ) ) {
                    return 'sharp';
                } else if ( 0<= ( "fa te me le ra se".split( ' ' ).indexOf( key )  ) ) {
                    return 'flat';
                } else {
                    throw new Error( `unknown key ${key}` );
                }
            }

            var l_notes = rotate( blowup( l_scale.split( /\s+/ ) ), rotation ) ;
            var r_notes = rotate( blowup( r_scale.split( /\s+/ ) ), rotation ) ;

            for ( var i=from; i<to; i++ ) {
                c.writeHeader2( number2interval( i ) + " Which Consists " + number2word( i ) + " Half Step"  + ( 1<i ? 's' : '' ) );
                c.writeScore( i + '-01-u', "@do' \\absolute \{ " + merge_with_offset( l_notes, r_notes,  i, 12 ,24 , 12 ) + " \}", {scmFestivalTempo:200} );
                c.writeScore( i + '-02-d', "@do' \\absolute \{ " + merge_with_offset( l_notes, r_notes,  i, 24 ,12 , 12 ) + " \}", {scmFestivalTempo:200} );
            }
        },
    };

    c.writeHeader0( "Enharmonic Intervals" );
    c.writeTextBody( 
           `In this section, all enharmonic intervals which intentionally disregard harmonic correctness are shown.`
            + COMMON_WORD_01
        );
    {

        // c.writeHeader1( "Enharmonic Intervals on the Chromatic Scale" );
        {
            c.writeHeader1( 'Intervals in Flat Chromatic Scale' );
            eitk.exec( 'do ra re me mi fa se sol le la te ti' );
            c.writeHeader1( 'Intervals in Sharp Chromatic Scales' );
            eitk.exec( 'do di re ri mi fa fi sol si la li ti' );

            c.writeHeader1( 'Intervals from Flat to Sharp' );
            eitk.exec( 'do ra re me mi fa se sol le la te ti', 'do di re ri mi fa fi sol si la li ti' );
            c.writeHeader1( 'Intervals from Sharp to Flat' );
            eitk.exec( 'do di re ri mi fa fi sol si la li ti', 'do ra re me mi fa se sol le la te ti' );
        }

    }

    c.writeHeader0( "Harmonic Intervals" );
    c.writeTextBody(
            "In this section, we will mathmatically permutate every possible combinations of any two notes to reveal every possible absolute intervals. " +
            "In order to acquire the absolute intervals, we transpose every possible relative intervals to every possible keys. " +
            "\n\n" +
            "In modern music, most instruments are equally tempered and thus there are only twelve notes in an octave. " +
            "In musical notation, however, it presumes that there could be instruments which are not based on equal temparaments; " +
            "in such case, semitones vary in size. Therefore it is not possible to assume that flat and sharp are always same size. " +
            "Thus there are two instances of the chromatic scale in the world of musical notation " + 
            "even though the existence of the chromatic scale is always one and only. "+ 
            "\n\n" +
            ""
        );
    {
        var scale_s = "do di re ri mi fa fi sol si la li ti".split( ' ' ).map( (s)=> s+"'" ) ;
        var scale_f = "do ra re me mi fa se sol le la te ti".split( ' ' ).map( (s)=> s+"'" ) ;

        function advancedIntervals( interval, caption ) {
            caption = caption.trim().replace( / +/, " " );

            var notes_f = "";
            var notes_s = "";
            var options  = { scmFestivalTempo:170, scmMarkIrregularAccidentals:true };
            for ( var i=0; i<12; i++ ) {
                if ( 0 < i ) {
                    notes_f += ' s ';
                    notes_s += ' s ';
                }
                notes_f += "@" + scale_f[i] + ' ' + interval;
                notes_s += "@" + scale_s[i] + ' ' + interval;
            }

            // Added the last note to both flat-series and sharp-series.
            notes_f += "@do' s do'";
            notes_s += "@do' s do'";

            c.writeHeader2( caption + ` ([${interval}])`);
            c.writeHeader3( caption + " in the Flat Chromatic Scale" );
            c.writeScore( "advanced-intervals", "\\absolute { \\abs " + notes_f + " } ", options );
            c.writeHeader3( caption + " in the Sharp Chromatic Scale" );
            c.writeScore( "advanced-intervals", "\\absolute { \\abs " + notes_s + " } ", options );
        }

        c.writeHeader1( "Practical Intervals" );

        advancedIntervals( "do de"   , "Diminished Unison"        );
        advancedIntervals( "do do"   , "Perfect    Unison"        );
        advancedIntervals( "do di"   , "Augumented Unison"        );
        advancedIntervals( "do ra"   , "Minor      Second"        );
        advancedIntervals( "do re"   , "Major      Second"        );
        advancedIntervals( "do ri"   , "Augumented Second"        );
        advancedIntervals( "do me"   , "Minor      Third"         );
        advancedIntervals( "do mi"   , "Major      Third"         );
        advancedIntervals( "do ma"   , "Augumented Third"         );
        advancedIntervals( "do fa"   , "Perfect    Fourth"        );
        advancedIntervals( "do fi"   , "Augumented Fourth"        );
        advancedIntervals( "do se"   , "Diminished Fifth"         );
        advancedIntervals( "do sol"  , "Perfect    Fifth"         );
        advancedIntervals( "do si"   , "Augumented Fifth"         );
        advancedIntervals( "do le"   , "Minor      Sixth"         );
        advancedIntervals( "do la"   , "Major      Sixth"         );
        advancedIntervals( "do li"   , "Augumented Sixth"         );
        advancedIntervals( "do te"   , "Minor      Seventh"       );
        advancedIntervals( "do ti"   , "Major      Seventh"       );
        advancedIntervals( "do ta"   , "Augumented Seventh"       );
        advancedIntervals( "do de'"  , "Diminished Octave"        );
        advancedIntervals( "do do'"  , "Perfect    Octave"        );
        advancedIntervals( "do di'"  , "Augumented Octave"        );
        advancedIntervals( "do ra'"  , "Minor      Ninth"         );
        advancedIntervals( "do re'"  , "Major      Ninth"         );
        advancedIntervals( "do ri'"  , "Augumented Ninth"         );
        advancedIntervals( "do me'"  , "Minor      Tenth"         );
        advancedIntervals( "do mi'"  , "Major      Tenth"         );
        advancedIntervals( "do ma'"  , "Augumented Tenth"         );
        advancedIntervals( "do fa'"  , "Perfect    Eleventh"      );
        advancedIntervals( "do fi'"  , "Augumented Eleventh"      );
        advancedIntervals( "do se'"  , "Diminished Twelveth"      );
        advancedIntervals( "do sol'" , "Perfect    Twelveth"      );
        advancedIntervals( "do si'"  , "Augumented Twelveth"      );
        advancedIntervals( "do le'"  , "Minor      Thirteenth"    );
        advancedIntervals( "do la'"  , "Major      Thirteenth"    );
        advancedIntervals( "do li'"  , "Augumented Thirteenth"    );
        advancedIntervals( "do te'"  , "Minor      Fourteenth"    );
        advancedIntervals( "do ti'"  , "Major      Fourteenth"    );
        advancedIntervals( "do ta'"  , "Augumented Fourteenth"    );
        advancedIntervals( "do de'"  , "Diminished Double Octave" );
        advancedIntervals( "do do''" , "Double     Octave"        );

        c.writeHeader1( "Theoretecal Intervals - Double Diminished" );
        advancedIntervals( "do daw"   , "Double Diminished Unison"        );
        advancedIntervals( "do raw"   , "Double Diminished Second"        );
        advancedIntervals( "do maw"   , "Double Diminished Third"         );
        advancedIntervals( "do faw"   , "Double Diminished Fourth"        );
        advancedIntervals( "do saw"   , "Double Diminished Fifth"         );
        advancedIntervals( "do law"   , "Double Diminished Sixth"         );
        advancedIntervals( "do taw"   , "Double Diminished Seventh"       );
        advancedIntervals( "do daw'"  , "Double Diminished Octave"        );
        advancedIntervals( "do raw'"  , "Double Diminished Ninth"         );
        advancedIntervals( "do maw'"  , "Double Diminished Tenth"         );
        advancedIntervals( "do faw'"  , "Double Diminished Eleventh"      );
        advancedIntervals( "do saw'"  , "Double Diminished Twelveth"      );
        advancedIntervals( "do law'"  , "Double Diminished Thirteenth"    );
        advancedIntervals( "do taw'"  , "Double Diminished Fourteenth"    );

        c.writeHeader1( "Theoretecal Intervals - Double Augumented" );
        advancedIntervals( "do dai"   , "Double Augumented Unison"        );
        advancedIntervals( "do rai"   , "Double Augumented Second"        );
        advancedIntervals( "do mai"   , "Double Augumented Third"         );
        advancedIntervals( "do fai"   , "Double Augumented Fourth"        );
        advancedIntervals( "do sai"   , "Double Augumented Fifth"         );
        advancedIntervals( "do lai"   , "Double Augumented Sixth"         );
        advancedIntervals( "do tai"   , "Double Augumented Seventh"       );
        advancedIntervals( "do dai'"  , "Double Augumented Octave"        );
        advancedIntervals( "do rai'"  , "Double Augumented Ninth"         );
        advancedIntervals( "do mai'"  , "Double Augumented Tenth"         );
        advancedIntervals( "do fai'"  , "Double Augumented Eleventh"      );
        advancedIntervals( "do sai'"  , "Double Augumented Twelveth"      );
        advancedIntervals( "do lai'"  , "Double Augumented Thirteenth"    );
        advancedIntervals( "do tai'"  , "Double Augumented Fourteenth"    );
    }


    // c.writeCommands(
    //         `
    //         \\begin\{tabular\}\{ l | c | r \}
    //           1 & 2 & 3 \\\\
    //           4 & 5 & 6 \\\\
    //           7 & 8 & 9 \\\\
    //         \\end\{tabular\}
    //         `.replace( /^\s*/, "" )
    //         );

    c.writeHeader0( "Scales" );
    // TODO
    c.writeTextBody( 
            "This section introduces some exercises to build fluency. " +
            COMMON_WORD_01
        );
    {
        // ch-070 =============================================
        // TODO
        c.writeTextBody( "In this theory, all scales are related to closest minor scale. Rotation is a method to derive all related scales on a scale. (under construction)\\" );
        {
            // BASIC
            c.writeHeader1( "Basic Scales" );
            c.writeTextBody( 
                    // TODO
                    "This section introduces some exercises to build fluency. " +
                    COMMON_WORD_01
                );

            c.writeHeader2( "Dorian Scale" );
            c.writeScore(  "dorian-basic",                           "do(do,re,me,fa,sol,la,te)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Diminished Scale" );
            c.writeScore(  'diminished-basic',                       "do(do,re,me,fa,se,le,la,ti)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Melodic Minor Scale" );
            c.writeScore(  'melodic-basic',                          "do(do,re,me,fa,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Harmonic Minor Scale" );
            c.writeScore(  'harmonic-basic',                         "do(do,re,me,fa,sol,le,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Melodic Minor \\sharp 11 Scale" );
            c.writeScore(  'melodic-s11-basic',                      "do(do,re,me,fi,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Wholetone Scale" );
            c.writeScore(  'wholetone-basic',                        "do(do,re,mi,fi,si,li)            1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
            c.writeHeader2( "Augumented Scale" );
            c.writeScore(  'augmented-basic',                        "do(do,me,mi,sol,le,ti)           1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
            c.writeHeader2( "Augumented Minor Major 7th Scale" );
            c.writeScore(  'augmented-ma7-basic',                    "do(do,re,me,mi,se,sol,le,te,ti)  1 2 3 4 5 6 7 8 9 1 s 1 9 8 7 6 5 4 3 2 1 "  );
            c.writeHeader2( "Augumented Natural 13th Scale" );
            c.writeScore(  'augmented-n13-basic',                    "do(do,re,me,mi,se,le,la,te)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );

            // DORIAN
            c.writeHeader1( "Dorian Related Scales" );
            c.writeHeader2( "Dorian Scale" );
            c.writeScore(  "dorian-01",                  "do(do,re,me,fa,sol,la,te)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Phrygian Scale" );
            c.writeScore(  "dorian-02",                  "do(re,me,fa,sol,la,te,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Lydian Scale" );
            c.writeScore(  "dorian-03",                  "do(me,fa,sol,la,te,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Mixolydian Scale" );
            c.writeScore(  "dorian-04",                  "do(fa,sol,la,te,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Aeolian Scale" );
            c.writeScore(  "dorian-05",                  "do(sol,la,te,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Locrian Scale" );
            c.writeScore(  "dorian-06",                  "do(la,te,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
            c.writeHeader2( "Ionian Scale" );
            c.writeScore(  "dorian-07",                  "do(te,do,re,me,fa,sol,la)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );


            // MELODIC
            c.writeHeader1( "Melodic Minor Related Scales" );

            c.writeHeader2( "Melodic Minor Scale" );
            c.writeScore(  "melodic-01",                  "do(do,re,me,fa,sol,la,ti)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Phrygian \\natural 13th Scale" );
            c.writeScore(  "melodic-02",                  "do(re,me,fa,sol,la,ti,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Lydian \\sharp 5th Scale" );
            c.writeScore(  "melodic-03",                  "do(me,fa,sol,la,ti,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Mixolydian \\sharp 11th Scale" );
            c.writeScore(  "melodic-04",                  "do(fa,sol,la,ti,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Aeolian Majour Scale ( Mixolydian \\flat 13th )" );
            c.writeScore(  "melodic-05",                  "do(sol,la,ti,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Locrian \\natural 9th Scale ( Super Locrian Scale )" );
            c.writeScore(  "melodic-06",                  "do(la,ti,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
            c.writeHeader2( "Ionian \\flat All Scale ( Altered Scale )" );
            c.writeScore(  "melodic-07",                  "do(ti,do,re,me,fa,sol,la)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );


            // HARMONIC
            c.writeHeader1( "Harmonic Minor Related Scales" );

            c.writeHeader2( "Harmonic Minor Scale" );
            c.writeScore(  "harmonic-01",                  "do(do,re,me,fa,sol,le,ti)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Locrian \\natural 13th Scale" );
            c.writeScore(  "harmonic-02",                  "do(re,me,fa,sol,le,ti,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Ionian \\sharp 5th Scale" );
            c.writeScore(  "harmonic-03",                  "do(me,fa,sol,le,ti,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Dorian \\sharp 11th Scale" );
            c.writeScore(  "harmonic-04",                  "do(fa,sol,le,ti,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Phrygian Major Scale ( Harmonic Minor Perfect 5th Below )" );
            c.writeTextBody( "(Mixolydian \\cflat 9th \\cflat 13th)" );
            c.writeScore(  "harmonic-05",                  "do(sol,le,ti,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Lydian \\sharp 9th Scale ( Super Locrian Scale )" );
            c.writeScore(  "harmonic-06",                  "do(le,ti,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
            c.writeHeader2( "Ionian Diminished 7th Scale ( Altered Scale )" );
            c.writeScore(  "harmonic-07",                  "do(ti,do,re,me,fa,sol,le)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        }
    }

    c.writeHeader0( "Intervals on Scales" );
    // TODO
    c.writeTextBody( 
            "This section introduces some exercises to build fluency. " +
            COMMON_WORD_01
        );
    {
        ditk.exec( "do re me fa sol la te"        , "Dorian Scale"                      );
        ditk.exec( "do re me fa se le la ti"      , "Diminished Scale"                  );
        ditk.exec( "do re me fa sol la ti"        , "Melodic Minor Scale"               );
        ditk.exec( "do re me fa sol le ti"        , "Harmonic Minor Scale"              );
        ditk.exec( "do re me fi sol la ti"        , "Melodic Minor \\sharp 11 Scale"    );
        ditk.exec( "do re mi fi si li"            , "Wholetone Scale"                   );
        ditk.exec( "do me mi sol le ti"           , "Augumented Scale"                  );
        ditk.exec( "do re me mi se sol le te ti"  , "Augumented Minor Major 7th Scale"  );
        ditk.exec( "do re me mi se le la te"      , "Augumented Natural 13th Scale"     );
    }


    if ( false ) {
        c.writeHeader0( "Advanced Exercises" );
        // TODO
        c.writeTextBody( 
                "This section introduces some exercises to build fluency. " +
                "Read them aloud repeatedly until you can recite without seeing the actual spells."
            );
        {
        }
    }

    c.writeHeader0( `Conclusion` );
    c.t_textBody`
        Conclusion.
        `;
    {

    }

    c.close();
}

batch();




// vim: spell expandtab filetype=javascript foldmethod=manual:

