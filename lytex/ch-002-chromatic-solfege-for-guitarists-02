#!/usr/bin/nodejs

// Names of Toolkits
// chtk ... Chromatic Tool Kit (CHTK)
// ditk ... Diatonic Interval Tool Kit (DITK)
// eitk ... Enharmonic Interval Tool kit(EITK)
// fctk ... Fret-diagram Chromatic Tool kit(FCTK)

// Initialization.
require( 'chromatic' ).globalSettings( require( 'local/settings' ) );

// Create the formatter.
var ScaleGenerator = require( 'chromatic/formatter' );


// Common Constant Values
var OUTPUT_PATH = 'out/'
var MSG_HARMONIC_TO_ENHARMONIC = 'Harmonic First, Enharmonic Last';
var MSG_ENHARMONIC_TO_HARMONIC = 'Enharmonic First, Harmonic Last';

var COMMON_WORD_01 = "Read them aloud repeatedly until you can recite without seeing the actual notes. ";

function batch() {
    // var DEBUG = true;
    var DEBUG = false;
    var c = new ScaleGenerator( OUTPUT_PATH /*, 'basic' */ );

    // c.writeNewPage();
    // c.t_abstract`Hey foo bar`;
    // c.writeNewPage();

    if ( DEBUG ) {
        c.setDevelopmentMode( true );
    }

    // fctk ... Fret-diagram Chromatic Tool kit(FCTK)
    var fctk = {
        left_rotate(arr,offset) {
            arr = arr.concat();
            return arr.concat( arr.splice( 0, offset ) );
        },
        build_octaves( arr ) {
            return [].concat( 
                // arr.map( (s)=> s + ","     ),
                arr.map( (s)=> s + ""      ),
                arr.map( (s)=> s + "'"     ),
                arr.map( (s)=> s + "''"    ),
                arr.map( (s)=> s + "'''"   ),
                arr.map( (s)=> s + "''''"  ),
                arr.map( (s)=> s + "'''''" )
            )
        },
        merge_with_offset( notes , offset, from, to  ) {
            var result = [];
            for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                result.push( notes[ ( i          ) ] + '8 [ ' );
                result.push( notes[ ( i + offset ) ] + '8 ] ' );
            }
            result.push( notes[ ( to          ) ] + '8 ] ' );

            return result.join( ' ' ) ;
        },

        merge_with_offset2( notes , offset, from, to  ) {
            var result = [];
            for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                result.push( notes[ ( i          ) ] + '4 ' );
                result.push( notes[ ( i + offset ) ] + '4 s ' );
            }
            result.push( notes[ ( to          ) ] + '2' );

            return result.join( ' ' ) ;
        },
        num2interval( n ) {
            switch ( n )  {
                case  0 : return "Unison";
                case  1 : return "Second";
                case  2 : return "Third";
                case  3 : return "Fourth";
                case  4 : return "Fifth";
                case  5 : return "Sixth";
                case  6 : return "Seventh";
                case  7 : return "Octave";
                case  8 : return "Ninth";
                case  9 : return "Tenth";
                case 10 : return "Eleventh";
                case 11 : return "Twelfth";
                case 12 : return "Thirteenth";
                case 13 : return "Fourteenth";
                case 14 : return "Fifteenth";
                default :
                    throw new Error('');
            }
        },
        key2caption( key ) {
            return "key in " + key;
        },
        exec( scale, caption ) {
            c.writeHeader1( caption ) ;

            for ( var ridx=0; ridx<1; ridx++ ) {
                var scale  = scale.split(' ') ;
                var key    = ditk.left_rotate( scale, ridx ).shift();
                var notes  = ditk.left_rotate( ditk.build_octaves( scale ), ridx );
                var ottava = 4 <= ridx ? '\\ottava #1' : '';

                var pos_s = scale.length;
                var pos_e = scale.length * 2;

                // c.writeHeader2( 'All Intervals within ' + caption ) ;

                /*
                 * NOTE : pos_e must be added one because the root note on the next octave must be shown there.
                 * (Thu, 07 Jun 2018 12:44:30 +0900)
                 */
                c.writeScore( 'scale', '@do ' + ottava + ' \\absolute { ' + notes.slice( pos_s, pos_e + 1  ).join( ' ' ) + ' | ' + notes.slice( pos_s, pos_e + 1 ).reverse().join( ' ' )  + ' } ' );

                for ( var nidx=0; nidx<8; nidx++ ) {
                    c.writeHeader2( "" + ditk.num2interval( nidx ) + " within " + caption );
                    c.writeScore( nidx + '-01-u', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_s ,pos_e ) + " }", {scmFestivalTempo:170} );
                    c.writeScore( nidx + '-02-d', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_e ,pos_s ) + " }", {scmFestivalTempo:170} );
                }
            }
        },
    };


    // guitarScaleList.push({
    //     __level : 0,
    //     __note  : k,
    //     key  : note2name( k (,
    //     scale : 'Dorian',
    //     header : note2name( k ) + '-Dorian',
    //     score : `@${k} \\relative { do re me fa sol la te }`,
    //     settings : getEntireFretDiagramDef(),
    // });
    // var guitarScaleList = [];



    // gftk
    var gftk = (()=>{
        function getEntireFretDiagramDef() {
            return {
                formatType : 'entire-diagram',
                // scmShowEntireScaleDiagram : true,
                scmAlwaysShowZeroFret : true ,
                scmFretRange : '(1 . 24 )',
                texGraphicWidth : 0.8 , 
                lyTextAfter : [6, 3]
            };
        }

        function getFretDiagramDef( skipCount, fingering ) {
            return {
                formatType : 'diagram',
                // scmShowScaleDiagram : true,
                scmAlwaysShowZeroFret : true,
                scmFretPositions : fingering,
                scmSkipCount : skipCount,
                scmFretRange : '(1 . 24)',
                texGraphicWidth : 0.8 , 
                lyTextAfter : [6,3]
            };
        }
        // Parallelogram
        function getParaFretDiagramDef( skipCount, fingering ) {
            var o = getFretDiagramDef( skipCount, fingering );
            o.scmDisplayType ="at-least-one";
            return o;
        }
        var __note2name = {
            'do' : 'C',
            'fa' : 'F',
            'te' : 'B\\flat',
            'me' : 'E\\flat',
            'le' : 'A\\flat',
            'ra' : 'D\\flat',
            'se' : 'G\\flat',
            'sol': 'G',
            're' : 'D',
            'la' : 'A',
            'mi' : 'E',
            'ti' : 'B',
            'fi' : 'F\\sharp',
        };
        function note2name( k ) {
            return __note2name[k];
        }

        var keys = "do fa te me le ra se ti mi la re sol".split( ' ' );
        if ( DEBUG ) {
            keys = [ 'te', 'se', 'ti' ];
        }
        function allKeys( f ) {
            for ( var key of keys ) {
                f( key, note2name( key ) );
            }
        }

        function autoFretDiagram( def ) {
            var {
                scale = null,
                scaleName = null,
                fingering = null,
                fingeringName = null,
                staticLength = null,
                displayAlgorithm = 'full', 
                positionName = ( rootIndex, posIndex ) =>{
                    switch ( rootIndex ) {
                        case 0 : return "Root-on-Left-6th-String";
                        case 1 : return "Root-on-Center-6th-String";
                        case 2 : return "Root-on-Right-6th-String";
                        case 3 : return "Root-on-Left-5th-String";
                        case 4 : return "Root-on-Center-5th-String";
                        case 5 : return "Root-on-Right-5th-String";
                        case 6 : return "Root-on-Left-4th-String";
                        default :
                            return "Position-" + posIndex;
                    }
                },
            } = def;


            function createFretDiagramDef ( index ) {
                if ( ! index ) index = 0;
                if ( displayAlgorithm === 'full' ) {
                    return gftk.getFretDiagramDef( index, fingering );
                } else if ( displayAlgorithm === 'para' ) {
                    return gftk.getParaFretDiagramDef( index, fingering );
                } else {
                    throw new Error( 'unknown type' + displayAlgorithm );
                }
            }

            if ( c.valid ) {
                c.writeHeader1( scaleName + " Scale with " + fingeringName +  "  Fingering" );

                gftk.allKeys( (k)=>{
                    var scaleDef = '@' + k + ' ' + scale;

                    c.writeHeader2( '[' + k + ']' + '-' + scaleName );
                    c.writeScore( k + '-entire', scaleDef, gftk.getEntireFretDiagramDef() );
                    c.writeNewLine();

                    var length = staticLength != null ? 
                        staticLength :
                        c.queryFretDiagram( 'Range', scaleDef,  createFretDiagramDef() ).length;

                    for ( var i=0; i<length; i++ ) {
                        var def = createFretDiagramDef( i );

                        var fingeringNotes = 
                            c.queryFretDiagram( 'VisibleNotes', scaleDef,   def ).fingeringNotes;

                        var rootIndex = 
                            fingeringNotes.findIndex((e)=>( k === e.replace( /[,']/gm, '' ).trim() ) );

                        c.writeHeader3( fingeringName + ' Fingering - ' + positionName( rootIndex, i )  + ' on [ ' + k + ' ] ' + scaleName );
                        c.writeScore( k + '-' + i, scaleDef, def );
                        c.writeNewLine();
                    }
                });
            }
        }

        return {
            note2name : note2name,
            FINGERING_2   : '( 6 6 5 5 4 4 3 3 2 2 1 1 )',
            FINGERING_3   : '( 6 6 6 5 5 5 4 4 4 3 3 3 2 2 2 1 1 1 )',
            FINGERING_4   : '( 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 1 )',
            FINGERING_3_1 : '( 6 6 6 5 4 4 4 3 2 2 2 1 )',
            FINGERING_1_3 : '( 6 5 5 5 4 3 3 3 2 1 1 1 )',
            FINGERING_2_NAME   : 'Two Note',
            FINGERING_3_NAME   : 'Three Note',
            FINGERING_4_NAME   : 'Four Note',
            FINGERING_3_1_NAME : 'Three-One Note',
            FINGERING_1_3_NAME : 'One-Three Note',
            getEntireFretDiagramDef  : getEntireFretDiagramDef,
            getParaFretDiagramDef    : getParaFretDiagramDef,
            getFretDiagramDef        : getFretDiagramDef,
            allKeys : allKeys,
            autoFretDiagram : autoFretDiagram,
        };
    })();

    // c.enable();
    // c.writeCommands( "\\setcounter{section}{0}\n" );
    // c.writeHeaderPart( "Appendix for Guitarists" );

    // TODO
    c.writeTextBody( 
            "This section introduces some exercises to build fluency. " +
            COMMON_WORD_01
        );
    c.disable();

    if ( true ) {
        // PENTATONIC
        c.writeHeader0( 'Pentatonic Scale' );

        // MINOR PENTATONIC 2
        gftk.autoFretDiagram({
            scale : '\\abs do me fa sol te',
            scaleName : 'Minor Pentatonic',
            fingering : gftk.FINGERING_2,
            fingeringName : gftk.FINGERING_2_NAME,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Left-Root-on-6th-String";
                    case 1 : return "Right-Root-on-6th-String";
                    case 2 : return "Left-Root-on-5th-String";
                    case 3 : return "Right-Root-on-5th-String";
                    case 4 : return "Left-Root-on-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // MINOR PENTATONIC 3+1
        gftk.autoFretDiagram({
            scale : '\\abs do me fa sol te',
            scaleName : 'Minor Pentatonic',
            fingering : gftk.FINGERING_3_1,
            fingeringName : gftk.FINGERING_3_1_NAME,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Left-Root-on-6th-String";
                    case 1 : return "Center-Root-on-6th-String";
                    case 2 : return "Right-Root-on-6th-String";
                    case 3 : return "Center-Root-on-5th-String";
                    case 4 : return "Left-Root-on-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // MINOR PENTATONIC 1+3
        gftk.autoFretDiagram({
            scale : '\\abs do me fa sol te',
            scaleName : 'Minor Pentatonic',
            fingering : gftk.FINGERING_1_3,
            fingeringName : gftk.FINGERING_1_3_NAME,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Center-Root-on-6th-String";
                    case 1 : return "Left-Root-on-5th-String";
                    case 2 : return "Center-Root-on-5th-String";
                    case 3 : return "Right-Root-on-5th-String";
                    case 4 : return "Center-Root-on-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // MINOR PENTATONIC 3
        gftk.autoFretDiagram({
            scale : '\\abs do me fa sol te',
            scaleName : 'Minor Pentatonic',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                }
            },
        });


        // DORIAN SCALE
        c.writeHeader0( 'Dorian Scale' );

        // DORIAN 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol la te',
            scaleName : 'Dorian',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // DORIAN 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol la te',
            scaleName : 'Dorian',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });


        if ( false ) {
            // DORIAN 2
            gftk.autoFretDiagram({
                scale : '\\abs do re me fa sol la te',
                scaleName : 'Dorian',
                fingering : gftk.FINGERING_2,
                fingeringName : gftk.FINGERING_2_NAME,
                displayAlgorithm : 'para', 
                positionName : ( rootIndex, posIndex ) =>{
                    switch ( rootIndex ) {
                        case 0 : return "Root-on-Left-6th-String";
                        case 1 : return "Root-on-Right-6th-String";
                        case 2 : return "Root-on-Left-5th-String";
                        case 3 : return "Root-on-Right-5th-String";
                        case 4 : return "Root-on-Left-4th-String";
                        case 5 : return "Root-on-Right-4th-String";
                        case 6 : return "Root-on-Left-3th-String";
                        default :
                                 return "Position-" + posIndex;
                    }
                },
            });
        }

        // DIMINISHED SCALE
        c.writeHeader0( 'Diminished Scale' );

        // Diminished 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa se le la ti',
            scaleName : 'Diminished',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Diminished 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa se le la ti',
            scaleName : 'Diminished',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // MELODIC MINOR SCALE
        c.writeHeader0( 'Melodic-Scale' );

        // c.enable();
        // Melodic Minor 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol la ti',
            scaleName : 'Melodic-Minor',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Melodic Minor 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol la ti',
            scaleName : 'Melodic-Minor',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // HARMONIC MINOR SCALE
        c.writeHeader0( 'Harmonic-Minor Scale' );

        // Harmonic Minor 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol le ti',
            scaleName : 'Harmonic-Minor',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Harmonic Minor 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me fa sol le ti',
            scaleName : 'Harmonic-Minor',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        //
        c.writeHeader0( 'Melodic-Minor \\sharp 11 Scale' );

        // Melodic Minor Sharp 11 - 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me fi sol la ti',
            scaleName : 'Melodic Minor \\sharp 11',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Melodic Minor Sharp 11 - 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me fi sol la ti',
            scaleName : 'Melodic Minor \\sharp 11',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        //
        c.writeHeader0( 'Whole-Tone Scale' );

        // Whole Tone 3
        gftk.autoFretDiagram({
            scale : '\\abs do re mi fi si li',
            scaleName : 'Whole-Tone',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Whole Tone - 4
        gftk.autoFretDiagram({
            scale : '\\abs do re mi fi si li',
            scaleName : 'Whole-Tone',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });


        /////////////

        //
        c.writeHeader0( 'Augumented Scale' );

        // Augumented Scale 3
        gftk.autoFretDiagram({
            scale : '\\abs do me mi sol si ti',
            scaleName : 'Augumented',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Augumented Scale 4
        gftk.autoFretDiagram({
            scale : '\\abs do me mi sol si ti',
            scaleName : 'Augumented',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        /////////////
        //
        c.writeHeader0( 'Double-Augumented Scale' );

        // Double Augumented Scale 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me mi se sol le te ti',
            scaleName : 'Double-Argumented',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    case 8 : return "Root-on-Right-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Double Augumented Scale 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me mi se sol le te ti',
            scaleName : 'Double-Augumented',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    case 8 : return "Root-on-1th-Fret-4th-String";
                    case 9 : return "Root-on-2th-Fret-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        //
        c.writeHeader0( 'Half-Augumented Scale' );

        // Half Augumented Scale 3
        gftk.autoFretDiagram({
            scale : '\\abs do re me mi se le la te',
            scaleName : 'Half-Argumented',
            fingering : gftk.FINGERING_3,
            fingeringName : gftk.FINGERING_3_NAME,
            // staticLength : 14,
            displayAlgorithm : 'full', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-Left-6th-String";
                    case 1 : return "Root-on-Center-6th-String";
                    case 2 : return "Root-on-Right-6th-String";
                    case 3 : return "Root-on-Left-5th-String";
                    case 4 : return "Root-on-Center-5th-String";
                    case 5 : return "Root-on-Right-5th-String";
                    case 6 : return "Root-on-Left-4th-String";
                    case 7 : return "Root-on-Center-4th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // Half Augumented Scale 4
        gftk.autoFretDiagram({
            scale : '\\abs do re me mi se sol le te ti',
            scaleName : 'Half-Augumented',
            fingering : gftk.FINGERING_4,
            fingeringName : gftk.FINGERING_4_NAME,
            // staticLength : 14,
            displayAlgorithm : 'para', 
            positionName : ( rootIndex, posIndex ) =>{
                switch ( rootIndex ) {
                    case 0 : return "Root-on-1st-Fret-6th-String";
                    case 1 : return "Root-on-2nd-Fret-6th-String";
                    case 2 : return "Root-on-3rd-Fret-6th-String";
                    case 3 : return "Root-on-4th-Fret-6th-String";
                    case 4 : return "Root-on-1st-Fret-5th-String";
                    case 5 : return "Root-on-2nd-Fret-5th-String";
                    case 6 : return "Root-on-3rd-Fret-5th-String";
                    case 7 : return "Root-on-4th-Fret-5th-String";
                    default :
                             return "Position-" + posIndex;
                }
            },
        });

        // c.disable();




            // c.writeHeader2( "Dorian Scale" );
            // c.writeScore(  "dorian-basic",                           "do(do,re,me,fa,sol,la,te)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Diminished Scale" );
            // c.writeScore(  'diminished-basic',                       "do(do,re,me,fa,se,le,la,ti)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Melodic Minor Scale" );
            // c.writeScore(  'melodic-basic',                          "do(do,re,me,fa,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Harmonic Minor Scale" );
            // c.writeScore(  'harmonic-basic',                         "do(do,re,me,fa,sol,le,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Melodic Minor \\sharp 11 Scale" );
            // c.writeScore(  'melodic-s11-basic',                      "do(do,re,me,fi,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Wholetone Scale" );
            // c.writeScore(  'wholetone-basic',                        "do(do,re,mi,fi,si,li)            1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
            // c.writeHeader2( "Augumented Scale" );
            // c.writeScore(  'augmented-basic',                        "do(do,me,mi,sol,le,ti)           1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
            // c.writeHeader2( "Augumented Minor Major 7th Scale" );
            // c.writeScore(  'augmented-ma7-basic',                    "do(do,re,me,mi,se,sol,le,te,ti)  1 2 3 4 5 6 7 8 9 1 s 1 9 8 7 6 5 4 3 2 1 "  );
            // c.writeHeader2( "Augumented Natural 13th Scale" );
            // c.writeScore(  'augmented-n13-basic',                    "do(do,re,me,mi,se,le,la,te)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );



//         for ( var k of keys ) {
//             var engKey = note2name( k ) + '-Pentatonic'
// 
//             c.writeHeader1( engKey );
// 
//             c.writeScore( k + '-entire', `@${k} \\abs do me fa sol te`, getEntireFretDiagramDef() );
//             c.writeNewLine();
// 
//             for ( var i=0; i<10; i++ ) {
//                 c.writeHeader2( 'Two-Note Fingering Position-' + i  + ' on ' + engKey );
// 
//                 c.writeScore( k + '-' + i, `@${k} \\abs do me fa sol te `, getFretDiagramDef( i, FINGERING_2 ) );
//                 c.writeNewLine();
//             }
// 
// 
// 
//             for ( var i=0; i<9; i++ ) {
//                 c.writeHeader2( 'One-Three-Note Fingering Position-' + i  + ' on ' + engKey );
// 
//                 c.writeScore( k + '-' + i, `@${k} \\abs do me fa sol te `, getFretDiagramDef( i, FINGERING_1_3 ) );
//                 c.writeNewLine();
//             }
// 
//             for ( var i=0; i<9; i++ ) {
//                 c.writeHeader2( 'Three-Note Fingering Position-' + i  + ' on ' + engKey );
// 
//                 c.writeScore( k + '-' + i, `@${k} \\abs do me fa sol te `, getFretDiagramDef( i, FINGERING_1_3 ) );
//                 c.writeNewLine();
//             }
// 
// 
//             var result_q1 = c.queryFretDiagram( 'Range', `@${k} \\abs do me fa sol te`,  getParaFretDiagramDef( 0, FINGERING_4 ) );
// 
//             for ( var i=0; i < result_q1.length; i++ ) {
//                 {
//                     var result = 
//                         c.queryFretDiagram( 'VisibleNotes', `@${k}  \\abs do me fa sol te`,   getParaFretDiagramDef( i, FINGERING_4 ) );
//                     console.error( "queryFretDiagram : result", result );
//                 }
// 
//                 c.writeHeader2( 'Four-Note Fingering Position-' + i  + ' on ' + engKey );
// 
//                 c.writeScore( k + '-' + i, `@${k} \\abs do me fa sol te`, getParaFretDiagramDef( i, FINGERING_4) );
//                 c.writeNewLine();
//             }
// 
//         }

    }
    // console.error( "HELLO", c.queryFretDiagram( `@do \\relative { do me fa sol te }`, getFretDiagramDef( 0, FINGERING_2 ) ) );


    if ( true ) {
        c.writeHeader0( "Transposing to Every Keys" );
        c.writeTextBody( "Freeing you from the single key." );
        c.writeHeader1( "Exercise to Acquire the Senses of Tonality" );

        function exec( id, keys, scale, pattern , title, comment ) {
            if ( title ) {
                c.writeHeader2( title );
            }
            if ( comment ) {
                c.writeTextBody( title );
            }
            for ( var i of keys ) {
                c.writeHeader3( 'Key ' + ita2ger[ i ] );
                c.writeScore( id + '_' + i, `@${i}(${scale}) ${ pattern }` );
            }
        }

        var keys = "do,fa,te,me,le,ra,se,sol,re,la,mi,ti,fi".split( ',' );
        var ita2ger = {
            'do' : 'C',
            'fa' : 'F',
            'te' : 'B\\flat',
            'me' : 'E\\flat',
            'le' : 'A\\flat',
            'ra' : 'D\\flat',
            'se' : 'G\\flat',
            'sol': 'G',
            're' : 'D',
            'la' : 'A',
            'mi' : 'E',
            'ti' : 'B',
            'fi' : 'F\\sharp',
        };

        var scale_dorian      = "do,re,me,fa,sol,la,te";
        var scale_diminished  = "do,re,me,fa,se,le,la,ti";
        var scale_melodic     = "do,re,me,fa,sol,la,ti";
        var scale_harmonic    = "do,re,me,fa,sol,le,ti";
        var scale_melodic_s11 = "do,re,me,fi,sol,la,ti";

        var scale_wholetone = "do,re,mi,fi,si,li";
        var scale_augment = "do,me,mi,sol,le,ti";
        var scale_augment_ma7 = "do,re,me,mi,se,sol,le,te,ti";
        var scale_augment_n13 = "do,re,me,mi,se,le,la,te";

        var pattern6_01 = "1&8 [ 3 5 7 ] s  2, [ 4 6 8 ] s 3, [ 5 7 9 ] s 4, [ 6 8 10 ] s  5, [ 7 9 11 ] s 6, [ 8 10 12 ] s 7, [ 9 11 13 ] "
        var pattern7_01 = "1&8 [ 3 5 7 ] s  2, [ 4 6 8 ] s 3, [ 5 7 9 ] s 4, [ 6 8 10 ] s  5, [ 7 9 11 ] s 6, [ 8 10 12 ] s 7, [ 9 11 13 ] s 8, [ 10 12 14 ]"
        var pattern8_01 = "1&8 [ 3 5 7 ] s  2, [ 4 6 8 ] s 3, [ 5 7 9 ] s 4, [ 6 8 10 ] s  5, [ 7 9 11 ] s 6, [ 8 10 12 ] s 7, [ 9 11 13 ] s 8, [ 10 12 14 ] s 9, [ 11 13 15 ]"
        var pattern9_01 = "1&8 [ 3 5 7 ] s  2, [ 4 6 8 ] s 3, [ 5 7 9 ] s 4, [ 6 8 10 ] s  5, [ 7 9 11 ] s 6, [ 8 10 12 ] s 7, [ 9 11 13 ] s 8, [ 10 12 14 ] s 9, [ 11 13 15 ] s 10, [ 12 14 16 ]"

        pattern6_01 = pattern6_01.replace( /s/g , "" );
        pattern7_01 = pattern7_01.replace( /s/g , "" );
        pattern8_01 = pattern8_01.replace( /s/g , "" );
        pattern9_01 = pattern9_01.replace( /s/g , "" );

        // 1
        // exec( "dor_br1", keys, scale_dorian,  pattern7_01, "Dorian - Broken Chord Movement 1", "" );


        // var pattern7_02 = "1 7   2 1   3 2   4 3   5 4   6 5   7 6   8 7    9 8  10 9 |! 8 9 7 8 6 7 5 6 4 5 3 4 2 3 1 2 7 1";
        // exec( keys, scale_dorian,       pattern7_02, "dor_2nd",     "Dorian - Interval 2nd ", "" );

        exec( "dor_3rd_lh",  keys, scale_dorian, "1 3   2 4   3 5   4 6   5 7   6 8   7 9   8 10  |! 8 10 7 9 6 8 5 7 4 6 3 5 2 4 1 3",
                 "Dorian - Interval 3rd - Low High", "" );

        exec( "dor_3rd_hl", keys, scale_dorian, "3 1    4 2    5 3    6 4    7 5    8 6    9 7  10 8 |! 10 8 9 7 8 6  7 5  6 4  5 3  4 2  3 1", 
                "Dorian - Interval 3rd - High Low", "" );

        // exec( "dor_4th", keys, scale_dorian,  "1 4   2 5   3 6   4 7   5 8   6 9   7 10   8 11  9 12 |! 11 8 10 7 9 6 8 5 7 4 6 3 5 2 4 1",
        // 		"Dorian - Interval 4th ", "" );
        // 
        // exec( "dor_5th", keys, scale_dorian,  "1 5' 2 6' 3 7' 4 8' 5 9' 6 10' 7 11' 8 12' 9 13' |! 12 8, 11 7, 10 6, 9 5, 8 4, 7 3, 6 2, 5 1,",
        // 		"Dorian - Interval 5th ", "" );
        // 
        // exec( "dor_6th", keys, scale_dorian,  "3 1' 4, 2' 5, 3' 6, 4' 7, 5' 1, 6' 2, 7' 3, 1'",
        // 		"Dorian - Interval 6th ", "" );




        // 
        // exec( keys, scale_melodic ,     pattern7_01, "mel",     "Melodic Minor - Broken Chord Movement 1", "" );
        // exec( keys, scale_harmonic,     pattern7_01, "har",     "Harmonic Minor - Broken Chord Movement 1", "" );
        // exec( keys, scale_melodic_s11 , pattern7_01, "mel_s11", "Melodic Minor \\sharp 11 - Broken Chord Movement 1", "" );
        // 
        // 
        // 
        // 
        // 
        // exec( keys, scale_diminished,   pattern8_01, "dim",     "Diminished - Broken Chord Movement 1", "" );
        // exec( keys, scale_wholetone ,   pattern6_01, "who",     "Melodic Minor \\sharp 11 - Broken Chord Movement 1", "" );
        // exec( keys, scale_augment ,    pattern6_01, "aug",     "Melodic Minor \\sharp 11 - Broken Chord Movement 1", "" );
        // exec( keys, scale_augment_ma7, pattern9_01, "aug_ma7", "Melodic Minor \\sharp 11 - Broken Chord Movement 1", "" );
        // exec( keys, scale_augment_n13, pattern8_01, "aug_n13", "Melodic Minor \\sharp 11 - Broken Chord Movement 1", "" );
        // 
    }

    if ( false ) {
        c.writeHeader0( "Advanced Exercises" );
        // TODO
        c.writeTextBody( 
                "This section introduces some exercises to build fluency. " +
                "Read them aloud repeatedly until you can recite without seeing the actual spells."
            );
        {
        }
    }

    if ( false ) {
        c.writeHeader0( `Conclusion` );
        c.t_textBody`
            Conclusion.
            `;
        {

        }
    }

    c.close();
}

batch();




// vim: spell expandtab filetype=javascript foldmethod=manual:

