var DEBUG = false;
var DIATONIC_NOTE_COUNT = 7;
var NOTE_VOID = 'void'

function triple( arr ) {
	return [].concat( arr, arr, arr );
}

var NOTE_TRIPLE_FLAT  = triple( [ 'daws','raws','maws','faws','saws','laws','taws', ] );
var NOTE_7QTR_FLAT    = triple( [ 'dawm','rawm','mawm','fawm','sawm','lawm','tawm', ] );
var NOTE_6QTR_FLAT    = triple( [ 'dawf','rawf','mawf','fawf','sawf','lawf','tawf', ] );
var NOTE_5QTR_FLAT    = triple( [ 'dawn','rawn','mawn','fawn','sawn','lawn','tawn', ] );
var NOTE_DOUBLE_FLAT  = triple( [ 'daw', 'raw', 'maw', 'faw', 'saw', 'law', 'taw',  ] );
var NOTE_3QTR_FLAT    = triple( [ 'dem', 'ram', 'mem', 'fem', 'sem', 'lem', 'tem',  ] );
var NOTE_FLAT         = triple( [ 'de' , 'ra',  'me',  'fe',  'se',  'le',  'te',   ] );
var NOTE_1QTR_FLAT    = triple( [ 'dew', 'rew', 'mew', 'few', 'sew', 'lew', 'tew',  ] );
var NOTE_NATURAL      = triple( [ 'do' , 're',  'mi',  'fa',  'sol', 'la',  'ti',   ] );
var NOTE_1QTR_SHARP   = triple( [ 'dia', 'ria', 'mia', 'fia', 'sia', 'lia', 'tia',  ] );
var NOTE_SHARP        = triple( [ 'di' , 'ri',  'ma',  'fi',  'si',  'li',  'ta',   ] );
var NOTE_3QTR_SHARP   = triple( [ 'dim', 'rim', 'mam', 'fim', 'sim', 'lim', 'tam',  ] );
var NOTE_DOUBLE_SHARP = triple( [ 'dai', 'rai', 'mai', 'fai', 'sai', 'lai', 'tai',  ] );
var NOTE_5QTR_SHARP   = triple( [ 'dain','rain','main','fain','sain','lain','tain', ] );
var NOTE_6QTR_SHARP   = triple( [ 'daif','raif','maif','faif','saif','laif','taif', ] );
var NOTE_7QTR_SHARP   = triple( [ 'daim','raim','maim','faim','saim','laim','taim', ] );
var NOTE_TRIPLE_SHARP = triple( [ 'dais','rais','mais','fais','sais','lais','tais', ] );

var NOTES_ALL = [
	NOTE_TRIPLE_FLAT,
	NOTE_7QTR_FLAT ,
	NOTE_6QTR_FLAT ,
	NOTE_5QTR_FLAT ,
	NOTE_DOUBLE_FLAT,
	NOTE_3QTR_FLAT ,
	NOTE_FLAT ,
	NOTE_1QTR_FLAT ,
	NOTE_NATURAL,
	NOTE_1QTR_SHARP, 
	NOTE_SHARP, 
	NOTE_3QTR_SHARP, 
	NOTE_DOUBLE_SHARP,
	NOTE_5QTR_SHARP, 
	NOTE_6QTR_SHARP, 
	NOTE_7QTR_SHARP, 
	NOTE_TRIPLE_SHARP,
];
var NOTE_LOOKUP_OFFSET       = 7;

var DIATONIC_TO_CHROMATIC = (()=>{
	var __offset = ( arr, v ) => {
		var result=[];
		for ( var i=0; i<arr.length; i++ ) {
			result[i] = arr[i] + v;
		}
		return result;
	};
	var t = [ 0, 4, 8, 10, 14, 18, 22, ]; 

	return [].concat( __offset(t,-24), __offset(t,0), __offset(t,+24) );
})();

var NOTES_CHROMATIC_VERTICAL_OFFSET = Math.floor( NOTES_ALL.length / 2 );
var NOTES_CHROMATIC_VALUE_TABLE = (()=>{
	var arr = [];
	for ( var i=0; i<NOTES_ALL.length; i++ ) {
		arr[i] = [];
		for ( var j=0; j< NOTES_ALL[i].length; j++ ) {
			arr[i][j] = DIATONIC_TO_CHROMATIC[ j ] - NOTES_CHROMATIC_VERTICAL_OFFSET + i;
		}
	}
	return arr;
})();


var dumpTable = (()=>{
	function format( s, l ) {
		var s = String(s);
		while ( s.length < l ) {
			s = ' ' + s;
		}
		return s;
	}
	return (arr)=> {
		var out= process.stderr;
		for ( var i=0; i<arr.length; i++ ) {
			for ( var j=0; j<arr[i].length; j++ ) {
				out.write( format( arr[i][j], 3 )  + ',' );
				if ( ( j +1 ) % 7 == 0 ) {
					out.write( '  ' );
				}
			}
			out.write( '\n' );
		}
		out.write( '\n' );
	};
})();

if ( DEBUG )
	dumpTable( NOTES_CHROMATIC_VALUE_TABLE );






// Chromatic
// var NOTES_CHROMATIC_VALUE_TABLE = [
// 	[-15, -13, -11, -10,  -8, -6, -4,  -3 ,-1, 1, 2, 4,  6,  8,    9, 11, 13, 14, 16, 18, 20, 21 ],
// 	[-14, -12, -10,  -9,  -7, -5, -3,  -2 , 0, 2, 3, 5,  7,  9,   10, 12, 14, 15, 17, 19, 21, 22 ],
// 	[-13, -11,  -9,  -8,  -6, -4, -2,  -1 , 1, 3, 4, 6,  8, 10,   11, 13, 15, 16, 18, 20, 22, 23 ],
// 	[-12, -10,  -8,  -7,  -5, -3, -1,   0 , 2, 4, 5, 7,  9, 11,   12, 14, 16, 17, 19, 21, 23, 24 ],
// 	[-11,  -9,  -7,  -6,  -4, -2,  0,   1 , 3, 5, 6, 8, 10, 12,   13, 15, 17, 18, 20, 22, 24, 25 ],
// 	[-10,  -8,  -6,  -5,  -3, -1,  1,   2 , 4, 6, 7, 9, 11, 13,   14, 16, 18, 19, 21, 23, 25, 26 ],
// 	[ -9,  -7,  -5,  -4,  -2,  0,  2,   3 , 5, 7, 8,10, 12, 14,   15, 17, 19, 20, 22, 24, 26, 27 ],
// ];

// // Micro Chromatic ( 26 Mar 2018)
// var NOTES_CHROMATIC_VALUE_TABLE = [
// 	[ -30,-26,-22,-20,-16,-12, -8,   -6, -2,  2,  4,  8, 12, 16,    18, 22, 26, 28, 32, 36, 40, 42, ], // TRIPLE FLAT
// 	[ -28,-24,-20,-18,-14,-10, -6,   -4,  0,  4,  6, 10, 14, 18,    20, 24, 28, 30, 34, 38, 42, 44, ], // DOUBLE FLAT
// 	[ -26,-22,-18,-16,-12, -8, -4,   -2,  2,  6,  8, 12, 16, 20,    22, 26, 30, 32, 36, 40, 44, 46, ], // FLAT
// 	[ -24,-20,-16,-14,-10, -6, -2,    0,  4,  8, 10, 14, 18, 22,    24, 28, 32, 34, 38, 42, 46, 48, ], // NATURAL
// 	[ -22,-18,-14,-12, -8, -4,  0,    2,  6, 10, 12, 16, 20, 24,    26, 30, 34, 36, 40, 44, 48, 50, ], // SHARP
// 	[ -20,-16,-12,-10, -6, -2,  2,    4,  8, 12, 14, 18, 22, 26,    28, 32, 36, 38, 42, 46, 50, 52, ], // DOUBLE SHARP
// 	[ -18,-14,-10, -8, -4,  0,  4,    6, 10, 14, 16, 20, 24, 28,    30, 34, 38, 40, 44, 48, 52, 54, ], // TRIPLE SHARP
// ];

var IDX_CTR = 0;
var IDX_TRIPLE_FLAT  = IDX_CTR++;
var IDX_7QTR_FLAT    = IDX_CTR++;
var IDX_6QTR_FLAT    = IDX_CTR++;
var IDX_5QTR_FLAT    = IDX_CTR++;
var IDX_DOUBLE_FLAT  = IDX_CTR++;
var IDX_3QTR_FLAT    = IDX_CTR++;
var IDX_FLAT         = IDX_CTR++;
var IDX_1QTR_FLAT    = IDX_CTR++;
var IDX_NATURAL      = IDX_CTR++;
var IDX_1QTR_SHARP   = IDX_CTR++;
var IDX_SHARP        = IDX_CTR++;
var IDX_3QTR_SHARP   = IDX_CTR++;
var IDX_DOUBLE_SHARP = IDX_CTR++;
var IDX_5QTR_SHARP   = IDX_CTR++;
var IDX_6QTR_SHARP   = IDX_CTR++;
var IDX_7QTR_SHARP   = IDX_CTR++;
var IDX_TRIPLE_SHARP = IDX_CTR++;


function NoteLoc( ci, ni ) {
	// category index
	this.ci = ci;
	// note index
	this.ni = ni;
}

NoteLoc.prototype.getChromaticIndex = function () {
	try {
		return NOTES_CHROMATIC_VALUE_TABLE[this.ci][this.ni];
	} catch ( e ) {
		return NOTE_VOID;
		throw new Error( "Could not refer the chromatic value at [ " + this.ci + "," + this.ni + "]" );
	}
};
NoteLoc.prototype.getDiatonicIndex = function () {
	return this.ni % 7;
};

NoteLoc.prototype.getNoteName = function() {
	try {
		return NOTES_ALL[this.ci][this.ni];
	} catch ( e ) {
		return NOTE_VOID;
		throw new Error( "Could not refer the note name at [ " + this.ci + "," + this.ni + "]" );
		// return '\\textSpanColorB do\\uin  s\\uout';
	}
};
NoteLoc.prototype.debug = function() {
	return this.getNoteName() +
		'('  + this.ci + ',' + this.ni + ') ' +
		'7:'   + this.getDiatonicIndex() + ' ' +
		'24:'  + this.getChromaticIndex() + ' ' + 
		'';
};
NoteLoc.prototype.toString = function() {
	return this.getNoteName();
};
NoteLoc.prototype.translate = function() {
	var ci = arguments[0];
	var ni = arguments[1];
	return new NoteLoc( this.ci + ci , this.ni + ni );
};

NoteLoc.lookup = function ( noteName )  {
	for ( var ci = 0; ci< NOTES_ALL.length; ci++ ) {
		for ( var ni = NOTE_LOOKUP_OFFSET; ni< NOTE_LOOKUP_OFFSET + DIATONIC_NOTE_COUNT; ni++ ) {
			if ( NOTES_ALL[ci][ni] == noteName ) {
				return new NoteLoc( ci, ni );
			}
		}
	}
	throw new Error( noteName + ' is not a valid note name' );
};



/*
 * Looking up Notes by Number   (Thu, 22 Mar 2018 21:09:45 +0900)
 *
 * There are multiple notes per a chromatic number. For example, when you look
 * up 4, the result would be [ mi, fe ]. In another example, if 7 is the number
 * that you look up, 7, the result would be [ sol fai law ].
 *
 * Therefore the user must to specify priority which indicates priority between
 * the these series [ double sharp, sharp, natural, flat, double flat ].
 */
var NOTELOC_LOOKUP_C_PRIORITY_TABLE = {
	// double sharp
	ds : [
		IDX_DOUBLE_SHARP,
		IDX_SHARP, 
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_DOUBLE_FLAT,
	],
	// sharp
	s : [
		IDX_NATURAL,
		IDX_SHARP, 
		IDX_FLAT ,
		IDX_DOUBLE_SHARP,
		IDX_DOUBLE_FLAT,
	],
	// natural
	n : [
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_SHARP, 
		IDX_DOUBLE_FLAT,
		IDX_DOUBLE_SHARP,
	],
	// flat
	f : [
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_SHARP, 
		IDX_DOUBLE_FLAT,
		IDX_DOUBLE_SHARP,
	],
	// double flat
	df : [
		IDX_DOUBLE_FLAT,
		IDX_FLAT ,
		IDX_NATURAL,
		IDX_SHARP, 
		IDX_DOUBLE_SHARP,
	],
};

// Lookup a proper NoteLoc object by chromatic order numeral
NoteLoc.lookup_c = function ( num, type )  {
	if ( ! type ) type = 'n';

	var note_arr_idx = NOTELOC_LOOKUP_C_PRIORITY_TABLE[ type ];
	if ( ! note_arr_idx )
		throw new Error( '(' + type + ') invalid lookup type' );

	for ( var ci = 0; ci< note_arr_idx.length; ci++ ) {
		var ci2 = note_arr_idx[ci];

		for ( var ni = 0; ni< 21; ni++ ) {
			if ( NOTES_CHROMATIC_VALUE_TABLE[ci2][ni] == num ) {
				return new NoteLoc( ci2, ni );
			}
		}
	}
	throw new Error( num + ' is not a valid note name' );
};

function transpose( root, interval ) {
	var rootNote     = NoteLoc.lookup( root ); 
	var intervalNote = NoteLoc.lookup( interval );


	// Increment the value by diatonic offset
	var tempNote = rootNote.translate( 0, intervalNote.getDiatonicIndex() );

	if ( DEBUG )
		console.error( 'root=>', rootNote.debug(), 'interval=>', intervalNote.debug(), 'temp=>' , tempNote.debug() );

	// Calculate chromatic offset of the value
	var coff =
		rootNote.getChromaticIndex() + intervalNote.getChromaticIndex()  -
		tempNote.getChromaticIndex();

	var resultNote = tempNote.translate( coff, 0 );

	return resultNote.toString();
}

function __transpose( root, intervals ) {
	if ( Array.isArray( intervals ) ) {
		var result = [];
		for ( var i=0; i<intervals.length; i++ ) {
			result.push( transpose( root, intervals[i] ) );
		}
		return result;
	} else {
		return transpose( root, intervals );
	}
}


function enharmonize( note, wrapper ){ 
	if ( ! wrapper ) {
		wrapper = function __wrapper( s ) {
			return s;
		}
	}
	switch ( note ) {
		case 'ta' : return wrapper( 'do' );
		case 'de' : return wrapper( 'ti' );
		case 'ma' : return wrapper( 'fa' );
		case 'fe' : return wrapper( 'mi' );

		case 'daw': return wrapper( 'te' );
		case 'raw': return wrapper( 'do' );
		case 'maw': return wrapper( 're' );
		case 'faw': return wrapper( 'me' );
		case 'saw': return wrapper( 'fa' );
		case 'law': return wrapper( 'sol' );
		case 'taw': return wrapper( 'la' );

		case 'dai': return wrapper( 're' );
		case 'rai': return wrapper( 'mi' );
		case 'mai': return wrapper( 'fi' );
		case 'fai': return wrapper( 'sol' );
		case 'sai': return wrapper( 'la' );
		case 'lai': return wrapper( 'ti' );
		case 'tai': return wrapper( 'di' );
		default :
			return note;
	}
}

function __enharmonize( notes, wrapper ) {
	if ( Array.isArray( notes ) ) {
		notes = Array.prototype.slice.call( notes );
		for ( var i=0; i<notes.length; i++ ) {
			notes[i] = enharmonize( notes[i], wrapper );
		}
		return notes;
	} else {
		return enharmonize( notes, wrapper );
	}
}

function isTripleSharp( note ) {
	return 0<=NOTE_TRIPLE_SHARP.indexOf( note );
}
function isTripleFlat( note ) {
	return 0<=NOTE_TRIPLE_FLAT.indexOf( note );
}
function isTripleAccidental( note ) {
	return isTripleFlat( note ) || isTripleSharp( note );
}
function isDoubleSharp( note ) {
	return 0<=NOTE_DOUBLE_SHARP.indexOf( note );
}
function isDoubleFlat( note ) {
	return 0<=NOTE_DOUBLE_FLAT.indexOf( note );
}
function isDoubleAccidental( note ) {
	return isDoubleFlat( note ) || isDoubleSharp( note );
}
function isSharp( note ) {
	return 0<=NOTE_SHARP.indexOf( note );
}
function isFlat( note ) {
	return 0<=NOTE_FLAT.indexOf( note );
}
function isAccidental( note ) {
	return isFlat( note ) || isSharp( note );
}

function isIrregularAccidental( note ) {
	switch ( note  ) {
		case 'de' : 
		case 'ta' : 
		case 'ma' : 
		case 'fe' : 
			return true;
	}
	return false;
}
function respell( note ) {
	switch ( note  ) {
		// sharp to flat
		case 'di' : return 'ra';
		case 'ri' : return 'me';
		case 'ma' : return 'fa';
		case 'fi' : return 'se';
		case 'si' : return 'le';
		case 'li' : return 'te';
		case 'ta' : return 'do';

		// flat to sharp
		case 'de' : return 'ti';
		case 'ra' : return 'di';
		case 'me' : return 'ri';
		case 'fe' : return 'mi';
		case 'se' : return 'fi';
		case 'le' : return 'si';
		case 'te' : return 'li';

		// natural to flat / sharp
		case 'ti' : return 'de';
		case 'mi' : return 'fe';
		case 'fa' : return 'ma';
		case 'do' : return 'ta';

		// double flat
		case 'daw': return 'te';
		case 'raw': return 'do';
		case 'maw': return 're';
		case 'faw': return 'me';
		case 'saw': return 'fa';
		case 'law': return 'sol';
		case 'taw': return 'la';

		// double sharp
		case 'dai': return 're';
		case 'rai': return 'mi';
		case 'mai': return 'fi';
		case 'fai': return 'sol';
		case 'sai': return 'la';
		case 'lai': return 'ti';
		case 'tai': return 'di';
	}
	return note;
}

function note2number( note ) {
	return NoteLoc.lookup( note ).getChromaticIndex();
}

function number2note( cval, type ) {
	return NoteLoc.lookup_c( cval, type ).getNoteName();
}


if ( module && module.exports ) {
	module.exports.transpose    = __transpose;
	module.exports.enharmonize  = __enharmonize;

	module.exports.isTripleSharp      = isTripleSharp;
	module.exports.isTripleFlat       = isTripleFlat;
	module.exports.isTripleAccidental = isTripleAccidental;
	module.exports.isDoubleSharp      = isDoubleSharp;
	module.exports.isDoubleFlat       = isDoubleFlat;
	module.exports.isDoubleAccidental = isDoubleAccidental;
	module.exports.isSharp            = isSharp;
	module.exports.isFlat             = isFlat;
	module.exports.isAccidental       = isAccidental;
	module.exports.isIrregularAccidental = isIrregularAccidental;
	module.exports.respell            = respell;
	module.exports.note2number        = note2number;
	module.exports.number2note        = number2note;

}

if ( require && module && require.main === module )  {
	var argv = Array.prototype.slice.call( process.argv );
	argv.shift();
	argv.shift();
	process.stdout.print( __transpose( argv.shift(), argv ).join( ' ' ) );
}

// vim: filetype=javascript :
