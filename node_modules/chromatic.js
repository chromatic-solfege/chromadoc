var NOTE_DOUBLE_FLAT  = [ 'daw', 'raw','maw','faw','saw', 'law','taw',   'daw', 'raw','maw','faw','saw', 'law','taw',  'daw','raw','maw','faw','saw', 'law','taw','daw', ];
var NOTE_FLAT  =        [ 'de' , 'ra', 'me', 'fe', 'se',  'le', 'te',    'de' , 'ra', 'me', 'fe', 'se',  'le', 'te',   'de' ,'ra', 'me', 'fe', 'se',  'le', 'te', 'de',  ];
var NOTE_NATURAL =      [ 'do' , 're', 'mi', 'fa', 'sol', 'la', 'ti',    'do' , 're', 'mi', 'fa', 'sol', 'la', 'ti',   'do', 're', 'mi', 'fa', 'sol', 'la', 'ti', 'do',  ];
var NOTE_SHARP =        [ 'di' , 'ri', 'ma', 'fi', 'si',  'li', 'ta',    'di' , 'ri', 'ma', 'fi', 'si',  'li', 'ta',   'di' ,'ri', 'ma', 'fi', 'si',  'li', 'ta', 'di',  ];
var NOTE_DOUBLE_SHARP = [ 'dai', 'rai','mai','fai','sai', 'lai','tai',   'dai', 'rai','mai','fai','sai', 'lai','tai',  'dai','rai','mai','fai','sai', 'lai','tai','dai', ];

var NOTE_ALL = [
	NOTE_DOUBLE_FLAT,
	NOTE_FLAT ,
	NOTE_NATURAL,
	NOTE_SHARP, 
	NOTE_DOUBLE_SHARP,
];

var NOTES_CHROMATIC_VALUE_TABLE = [
	[-14, -12, -10,  -9,  -7, -5, -3,  -2 , 0, 2, 3, 5,  7,  9,   10, 12, 14, 15, 17, 19, 21, 22 ],
	[-13, -11,  -9,  -8,  -6, -4, -2,  -1 , 1, 3, 4, 6,  8, 10,   11, 13, 15, 16, 18, 20, 22, 23 ],
	[-12, -10,  -8,  -7,  -5, -3, -1,   0 , 2, 4, 5, 7,  9, 11,   12, 14, 16, 17, 19, 21, 23, 24 ],
	[-11,  -9,  -7,  -6,  -4, -2,  0,   1 , 3, 5, 6, 8, 10, 12,   13, 15, 17, 18, 20, 22, 24, 25 ],
	[-10,  -8,  -6,  -5,  -3, -1,  1,   2 , 4, 6, 7, 9, 11, 13,   14, 16, 18, 19, 21, 23, 25, 26 ],
];

function NoteLoc( ci, ni ) {
	// category index
	this.ci = ci;
	// note index
	this.ni = ni;
}

NoteLoc.prototype.getChromaticIndex = function () {
	return NOTES_CHROMATIC_VALUE_TABLE[this.ci][this.ni];
};

NoteLoc.prototype.getNoteName = function() {
	return NOTE_ALL[this.ci][this.ni];
};
NoteLoc.prototype.toString = function() {
	return this.getNoteName();
};

NoteLoc.lookup = function ( noteName )  {
	for ( var ci = 0; ci< NOTE_ALL.length; ci++ ) {
		for ( var ni = 0; ni< 7; ni++ ) {
			if ( NOTE_ALL[ci][ni] == noteName ) {
				return new NoteLoc( ci, ni );
			}
		}
	}
	throw new Error( noteName + ' is not a valid note name' );
};

var IDX_DOUBLE_FLAT  = 0;
var IDX_FLAT         = 1;
var IDX_NATURAL      = 2;
var IDX_SHARP        = 3;
var IDX_DOUBLE_SHARP = 4;


/*
 * Looking up Notes by Number   (Thu, 22 Mar 2018 21:09:45 +0900)
 *
 * There are multiple notes per a chromatic number. For example, when you look
 * up 4, the result would be [ mi, fe ]. In another example, if 7 is the number
 * that you look up, 7, the result would be [ sol fai law ].
 *
 * Therefore the user must to specify priority which indicates priority between
 * the these series [ double sharp, sharp, natural, flat, double flat ].
 */
var NOTELOC_LOOKUP_C_PRIORITY_TABLE = {
	// double sharp
	ds : [
		IDX_DOUBLE_SHARP,
		IDX_SHARP, 
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_DOUBLE_FLAT,
	],
	// sharp
	s : [
		IDX_NATURAL,
		IDX_SHARP, 
		IDX_FLAT ,
		IDX_DOUBLE_SHARP,
		IDX_DOUBLE_FLAT,
	],
	// natural
	n : [
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_SHARP, 
		IDX_DOUBLE_FLAT,
		IDX_DOUBLE_SHARP,
	],
	// flat
	f : [
		IDX_NATURAL,
		IDX_FLAT ,
		IDX_SHARP, 
		IDX_DOUBLE_FLAT,
		IDX_DOUBLE_SHARP,
	],
	// double flat
	df : [
		IDX_DOUBLE_FLAT,
		IDX_FLAT ,
		IDX_NATURAL,
		IDX_SHARP, 
		IDX_DOUBLE_SHARP,
	],
};

// Lookup a proper NoteLoc object by chromatic order numeral
NoteLoc.lookup_c = function ( num, type )  {
	if ( ! type ) type = 'n';

	var note_arr_idx = NOTELOC_LOOKUP_C_PRIORITY_TABLE[ type ];
	if ( ! note_arr_idx )
		throw new Error( '(' + type + ') invalid lookup type' );

	for ( var ci = 0; ci< note_arr_idx.length; ci++ ) {
		var ci2 = note_arr_idx[ci];

		for ( var ni = 0; ni< 21; ni++ ) {
			if ( NOTES_CHROMATIC_VALUE_TABLE[ci2][ni] == num ) {
				return new NoteLoc( ci2, ni );
			}
		}
	}
	throw new Error( num + ' is not a valid note name' );
};

function Interval( name, cval, dval ) {
	// Name
	this.name = name;
	// Chromatic  Note Index
	this.cval = cval;
	// Diatonic Note Index
	this.dval = dval;
}

var INTERVALS = [
	//           id    chr  dia 
	new Interval( 'daw', -2,  0 ),
	new Interval( 'de',  -1,  0 ),
	new Interval( 'do',   0,  0 ),
	new Interval( 'di',   1,  0 ),
	new Interval( 'dai',  2,  0 ),

	new Interval( 'raw',  0,  1 ),
	new Interval( 'ra',   1,  1 ),
	new Interval( 're',   2,  1 ),
	new Interval( 'ri',   3,  1 ),
	new Interval( 'rai',  4,  1 ),

	new Interval( 'maw',  2,  2 ),
	new Interval( 'me',   3,  2 ),
	new Interval( 'mi',   4,  2 ),
	new Interval( 'ma',   5,  2 ),
	new Interval( 'mai',  6,  2 ),

	new Interval( 'faw',  3,  3 ),
	new Interval( 'fe',   4,  3 ),
	new Interval( 'fa',   5,  3 ),
	new Interval( 'fi',   6,  3 ),
	new Interval( 'fai',  7,  3 ),

	new Interval( 'saw',  7,  4 ),
	new Interval( 'se' ,  7,  4 ),
	new Interval( 'sol',  7,  4 ),
	new Interval( 'si',   7,  4 ),
	new Interval( 'sai',  7,  4 ),

	new Interval( 'law',  7,  5 ),
	new Interval( 'le',   8,  5 ),
	new Interval( 'la',   9,  5 ),
	new Interval( 'li',  10,  5 ),
	new Interval( 'lai', 11,  5 ),

	new Interval( 'taw',  9,  6 ),
	new Interval( 'te',  10,  6 ),
	new Interval( 'ti',  11,  6 ),
	new Interval( 'ta',  12,  6 ),
	new Interval( 'tai', 13,  6 ),

	new Interval(  '1',  0, 0 ),
	new Interval(  '2',  2, 1 ),
	new Interval( 'b9',  3, 1 ),
	new Interval(  '9',  2, 1 ),
	new Interval( '#9',  3, 1 ),
	new Interval( 'm3',  3, 2 ),
	new Interval( 'M3',  4, 2 ),
	new Interval(  '3',  4, 2 ),
	new Interval(  '4',  5, 3 ),
	new Interval( '11',  5, 3 ),
	new Interval('#11',  6, 3 ),
	new Interval( 'd5',  6, 4 ),
	new Interval(  '5',  7, 4 ),
	new Interval( '#5',  8, 4 ),
	new Interval( 'm6',  8, 5 ),
	new Interval(  '6',  9, 5 ),
	new Interval(  '7', 10, 6 ),
	new Interval( 'M7', 11, 6 ),
	new Interval(  '8', 12, 7 ),

];

Interval.lookup = function ( name ) {
	for ( var i=0; i<INTERVALS.length; i++ ) {
		if ( INTERVALS[i].name == name ) {
			return INTERVALS[i];
		}
	}
	throw new Error( name + ' is not a valid interval name' );
};


Interval.lookup_c = function ( cval ) {
	for ( var i=0; i<INTERVALS.length; i++ ) {
		if ( INTERVALS[i].cval == cval ) {
			return INTERVALS[i];
		}
	}
	throw new Error( cval + ' is not a valid number as an interval' );
};


function translate( root, interval ) {
	var noteLoc  = NoteLoc.lookup( root ); 
	var interval = Interval.lookup( interval );


	// Increment the value by diatonic offset
	var noteLoc2 = new NoteLoc( noteLoc.ci, noteLoc.ni + interval.dval );

	// Calculate chromatic offset of the value
	var coff =
		noteLoc.getChromaticIndex() + interval.cval  -
		noteLoc2.getChromaticIndex();

	noteLoc2.ci += coff;

	return noteLoc2.toString();
}

function __translate( root, intervals ) {
	if ( Array.isArray( intervals ) ) {
		var result = [];
		for ( var i=0; i<intervals.length; i++ ) {
			result.push( translate( root, intervals[i] ) );
		}
		return result;
	} else {
		return translate( root, intervals );
	}
}


function enharmonize( note, wrapper ){ 
	if ( ! wrapper ) {
		wrapper = function __wrapper( s ) {
			return s;
		}
	}
	switch ( note ) {
		case 'ta' : return wrapper( 'do' );
		case 'de' : return wrapper( 'ti' );
		case 'ma' : return wrapper( 'fa' );
		case 'fe' : return wrapper( 'mi' );

		case 'daw': return wrapper( 'te' );
		case 'raw': return wrapper( 'do' );
		case 'maw': return wrapper( 're' );
		case 'faw': return wrapper( 'me' );
		case 'saw': return wrapper( 'fa' );
		case 'law': return wrapper( 'sol' );
		case 'taw': return wrapper( 'la' );

		case 'dai': return wrapper( 're' );
		case 'rai': return wrapper( 'mi' );
		case 'mai': return wrapper( 'fi' );
		case 'fai': return wrapper( 'sol' );
		case 'sai': return wrapper( 'la' );
		case 'lai': return wrapper( 'ti' );
		case 'tai': return wrapper( 'di' );
		default :
			return note;
	}
}

function __enharmonize( notes, wrapper ) {
	if ( Array.isArray( notes ) ) {
		notes = Array.prototype.slice.call( notes );
		for ( var i=0; i<notes.length; i++ ) {
			notes[i] = enharmonize( notes[i], wrapper );
		}
		return notes;
	} else {
		return enharmonize( notes, wrapper );
	}
}

function isDoubleSharp( note ) {
	return 0<=NOTE_DOUBLE_SHARP.indexOf( note );
}
function isDoubleFlat( note ) {
	return 0<=NOTE_DOUBLE_FLAT.indexOf( note );
}
function isDoubleAccidental( note ) {
	return isDoubleFlat( note ) || isDoubleSharp( note );
}
function isSharp( note ) {
	return 0<=NOTE_SHARP.indexOf( note );
}
function isFlat( note ) {
	return 0<=NOTE_FLAT.indexOf( note );
}
function isAccidental( note ) {
	return isFlat( note ) || isSharp( note );
}

function isIrregularAccidental( note ) {
	switch ( note  ) {
		case 'de' : 
		case 'ta' : 
		case 'ma' : 
		case 'fe' : 
			return true;
	}
	return false;
}
function respell( note ) {
	switch ( note  ) {
		// sharp to flat
		case 'di' : return 'ra';
		case 'ri' : return 'me';
		case 'ma' : return 'fa';
		case 'fi' : return 'se';
		case 'si' : return 'le';
		case 'li' : return 'te';
		case 'ta' : return 'do';

		// flat to sharp
		case 'de' : return 'ti';
		case 'ra' : return 'di';
		case 'me' : return 'ri';
		case 'fe' : return 'mi';
		case 'se' : return 'fi';
		case 'le' : return 'si';
		case 'te' : return 'li';

		// natural to flat / sharp
		case 'ti' : return 'de';
		case 'mi' : return 'fe';
		case 'fa' : return 'ma';
		case 'do' : return 'ta';

		// double flat
		case 'daw': return 'te';
		case 'raw': return 'do';
		case 'maw': return 're';
		case 'faw': return 'me';
		case 'saw': return 'fa';
		case 'law': return 'sol';
		case 'taw': return 'la';

		// double sharp
		case 'dai': return 're';
		case 'rai': return 'mi';
		case 'mai': return 'fi';
		case 'fai': return 'sol';
		case 'sai': return 'la';
		case 'lai': return 'ti';
		case 'tai': return 'di';
	}
	return note;
}

function note2number( note ) {
	return Interval.lookup( note ).cval;
}

function number2note( cval, type ) {
	return NoteLoc.lookup_c( cval, type ).getNoteName();
}


if ( module && module.exports ) {
	module.exports.translate    = __translate;
	module.exports.enharmonize  = __enharmonize;

	module.exports.isDoubleSharp      = isDoubleSharp;
	module.exports.isDoubleFlat       = isDoubleFlat;
	module.exports.isDoubleAccidental = isDoubleAccidental;
	module.exports.isSharp            = isSharp;
	module.exports.isFlat             = isFlat;
	module.exports.isAccidental       = isAccidental;
	module.exports.isIrregularAccidental = isIrregularAccidental;
	module.exports.respell            = respell;
	module.exports.note2number        = note2number;
	module.exports.number2note        = number2note;

}

if ( require && module && require.main === module )  {
	var argv = Array.prototype.slice.call( process.argv );
	argv.shift();
	argv.shift();
	process.stdout.print( __translate( argv.shift(), argv ).join( ' ' ) );
}

// vim: filetype=javascript :
