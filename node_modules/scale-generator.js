#!/usr/bin/nodejs

var ch = require( 'chromatic' );
var fs = require( 'fs' );
var template  = require( 'solfege-template' );

function transpose( str ) {
	var arr = str.split( / +/ );
	return ch.transpose( arr.shift() , arr  ).join( " " )
}

function toNotes( s ) {
	s = s.replace( '|', '\\bar "|" ' );
	s = s.replace( /\n/, ' \\bar "" \\break ' );
	return s;
}
function toLyrics( s ) {
	// Removing 's'
	s = s.replace( /(\s*\bs[0-9]*\b\s*)/g, ' ' );
	// Replacing ' ,
	s = s.replace( /[\'\,]/, " " );
	// Replacing '< ... >'
	s = s.replace( /\<(.*?)\>/g, ( s0, s1 ) => {
		s1 = s1.split( / +/ ).reverse().join( " " ).trim();
		return "\\markup{   \\override #\'(baseline-skip . 2.5) \\center-column{ " + s1 + "  } } " 
	});
	return s;
}
function fmt( i, len ) {
	var s = String(i);
	while ( s.length < len ) {
		s ='0' + s; 
	}
	return s;
}

function toPDF( filename ) {
	return filename.replace( /\.ly$/, '.pdf' );
}


function ScaleGenerator( outputPath, filenamePrefix ) {
	if (! outputPath || ! filenamePrefix ) throw new Error();
	this.outputPath = outputPath;
	this.filenamePrefix = filenamePrefix;
	this.counter = 0;
	this.includeText = "";
	this.valueCurrentOutputFilename = "";
}

ScaleGenerator.applyTemplate =  function applyTemplate( arr ) {
	if ( Array.isArray( arr ) ) {
	} else {
		arr = [ arr ] ;
	}

	var result = [];
	for ( var i=0; i< arr.length; i++ ) {
		var s = transpose( arr[i] );

		// console.error( s );
		// console.error( toNotes( s ) ) ;
		// console.error( toLyrics( s ) ) ;
		result[i] = {
			notes : toNotes( s ),
			lyrics : toLyrics( s  ),
		};
	}
	return template( result );
};

ScaleGenerator.writeFile  = function( filename, output ) {
	console.error( filename );
	fs.writeFileSync( filename, output, 'utf8' );
};


ScaleGenerator.prototype.nextOutputFilename = function( id ) {
	this.valueCurrentOutputFilename = this.filenamePrefix + '-' + fmt( this.counter++ ,3 ) + '-' + id + '.ly';
};

ScaleGenerator.prototype.currentOutputFilename = function(id) {
	return this.outputPath + this.valueCurrentOutputFilename;
};
ScaleGenerator.prototype.currentOutputFilenameAsPDF = function(id) {
	return toPDF( this.valueCurrentOutputFilename );
};

ScaleGenerator.prototype.mainOutputFilename = function() {
	return this.outputPath + this.filenamePrefix + '-' + "output" + '.tex';
};

ScaleGenerator.prototype.writeIncludeText = function writeIncludeText( s ) {
	this.includeText += s;
};

ScaleGenerator.notes2id = function( notes ) {
	var id = notes.split( /\s+/ ).shift();
	if ( id ) 
		id.replace( /(^[a-zA-Z0-9\-_]+)(.*)$/ , (s0,s1,s2)=> s1 );
	if ( ! id  )
		throw new Error( "Invalid ID (" + id + ")" );
	return id;
};

ScaleGenerator.prototype.writeScore = function () {
	var type, notes;
	var arr = Array.prototype.slice.call ( arguments );
	if ( arr.length == 0 ) {
		throw new Error( 'invalid argument error' );
	} else if ( arr.length == 1 ) {
		[ type, notes ] = [ null, arr[0] ];
	} else {
		[ type, notes ] = arr;
	}

	var id;
	if ( type == null ) {
		id = notes.split( /\s+/ ).shift();
		id = id.replace( /^([^@]+)(.*)$/, (s0,s1,s2)=> s1 );
	} else {
		id = type;
	}
	// console.error( id );

	var output = ScaleGenerator.applyTemplate( notes );
	this.nextOutputFilename( id );
	ScaleGenerator.writeFile( this.currentOutputFilename(), output );
	this.writeIncludeText( '\\noindent $\\vcenter{ \\hbox{ \\includegraphics[width=1.0 \\textwidth]{' + this.currentOutputFilenameAsPDF() + '}}}$\n' );
};

ScaleGenerator.prototype.writeHeader1 = function(caption) {
	this.writeIncludeText('\\subsection{' + caption + '}\n' );
};

ScaleGenerator.prototype.writeHeader2 = function(caption) {
	this.writeIncludeText( '\\subsubsection{' + caption + '}\n' );
};
ScaleGenerator.prototype.writeHeader3 = function(caption) {
	this.writeIncludeText( '\\paragraph{' + caption + '}\n' );
};

ScaleGenerator.prototype.writeTextBody = function(caption) {
	this.writeIncludeText( '' + caption + '\n\n' );
};
ScaleGenerator.prototype.close = function(caption) {
	var filename = this.mainOutputFilename();

	ScaleGenerator.writeFile( filename, this.includeText );

	console.log( "\\graphicspath{ {" + this.outputPath + "} }" );
	console.log( "\\input{ {" + filename + "} }" );
};


if ( module && module.exports ) {
	module.exports = ScaleGenerator;
}



// vim: filetype=javascript :

