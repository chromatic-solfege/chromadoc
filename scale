#!/usr/bin/nodejs

var ch = require( 'chromatic' );
var fs = require( 'fs' );
var template  = require( 'solfege-template' );
var OUTPUT_PATH = 'out/'


function transpose( str ) {
	var arr = str.split( / +/ );
	return ch.transpose( arr.shift() , arr  ).join( " " )
}

function toNotes( s ) {
	s = s.replace( '|', '\\bar "|" ' );
	s = s.replace( /\n/, ' \\bar "" \\break ' );
	return s;
}
function toLyrics( s ) {
	// Removing 's'
	s = s.replace( /(\s*\bs[0-9]*\b\s*)/g, ' ' );
	// Replacing '< ... >'
	s = s.replace( /\<(.*)\>/g, ( s0, s1 ) => {
		s1 = s1.split( / +/ ).reverse().join( " " ).trim();
		return "\\markup{   \\override #'(baseline-skip . 3) \\center-column{ " + s1 + "  } } " 
	});
	// Replacing ' ,
	s = s.replace( /[\'\,]/, " " );
	return s;
}
function fmt( i, len ) {
	var s = String(i);
	while ( s.length < len ) {
		s ='0' + s; 
	}
	return s;
}

function toPDF( filename ) {
	return filename.replace( /\.ly$/, '.pdf' );
}

function applyTemplate( arr ) {
	if ( Array.isArray( arr ) ) {
	} else {
		arr = [ arr ] ;
	}
	var result = [];
	for ( var i=0; i< arr.length; i++ ) {
		var s = transpose( arr[i] );

		console.error( toNotes( s ) ) ;
		console.error( toLyrics( s ) ) ;
		result[i] = {
			notes : toNotes( s ),
			lyrics : toLyrics( s  ),
		};
	}
	return template( result );
}

function ChromaticBatch( outputPath, filenamePrefix ) {
	if (! outputPath || ! filenamePrefix ) throw new Error();
	this.outputPath = outputPath;
	this.filenamePrefix = filenamePrefix;
	this.counter = 0;
	this.includeText = "";
}
ChromaticBatch.prototype.nextOutputFilename = function(id) {
	return this.filenamePrefix + '-' + fmt( this.counter++ ,3 ) + '-' + id + '.ly';
};
ChromaticBatch.prototype.mainOutputFilename = function() {
	return this.filenamePrefix + '-' + "output" + '.tex';
};
function toTex( s ) {
	s = s.replace( /♯/, '$\\sharp$' );
	s = s.replace( /♭/, '$\\flat$' );
	s = s.replace( /𝄫/, '$\\flatflat$' );
	s = s.replace( /𝄪/, '$\\doublesharp$' );
	return s;
}
function toAscii( s ) {
	s = s.replace( /♯/, 's' );
	s = s.replace( /♭/, 'f' );
	return s;
}

function writeFile( filename, output ) {
	console.error( filename );
	fs.writeFileSync( filename, output, 'utf8' );
}

ChromaticBatch.prototype.writeScore = function ( type, notes ) {
	var id = notes.split( /\s+/ ).shift();
	var output = applyTemplate( notes ) ;
	var filename = this.nextOutputFilename( type + '-' + id );

	writeFile( this.outputPath + filename, output );

	this.includeText+= '\\noindent ';
	this.includeText+=  ch.note2alphabet_tex( id ); 
	this.includeText+= '$\\vcenter{ \\hbox{ \\includegraphics[width=1.0 \\textwidth]{' + toPDF( filename )  + '}}}$\n';
};

ChromaticBatch.prototype.writeHeader1 = function(caption) {
	this.includeText+= '\\subsection{' + caption + '}\n';
};

ChromaticBatch.prototype.writeHeader2 = function(caption) {
	this.includeText+= '\\subsubsection{' + caption + '}\n';
};
ChromaticBatch.prototype.writeHeader3 = function(caption) {
	this.includeText+= '\\paragraph{' + caption + '}\n';
};
ChromaticBatch.prototype.close = function(caption) {
	var filename = this.outputPath + this.mainOutputFilename();

	writeFile( filename, this.includeText );

	console.log( "\\graphicspath{ {" + this.outputPath + "} }" );
	console.log( "\\input{ {" + filename + "} }" );
};

function batch() {
	var c = new ChromaticBatch( 'out/', 'scale' );
	c.writeHeader1( "Natural" );
	c.writeScore( "diatonic", "do  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeHeader1( "Sharp" );
	c.writeScore( "diatonic", "sol do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "re  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "la  do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "mi  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "ti  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "fi  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeHeader1( "Flat" );
	c.writeScore( "diatonic", "fa  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "te  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "me  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "le  do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "re  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "se  do' re mi fa sol la ti do | do ti la sol fa mi re do" );

	c.writeHeader1( "Special ( Flat )" );
	c.writeScore( "diatonic", "de  do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "fe  do' re mi fa sol la ti do | do ti la sol fa mi re do" );

	c.writeHeader1( "Special ( Sharp )" );
	c.writeScore( "diatonic", "di  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "si  do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "ri  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "li  do' re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "ma  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.writeScore( "diatonic", "ta  do  re mi fa sol la ti do | do ti la sol fa mi re do" );
	c.close();
}

batch();




// vim: filetype=javascript :

